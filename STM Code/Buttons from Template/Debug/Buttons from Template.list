
Buttons from Template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037c0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08003950  08003950  00013950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039e4  080039e4  000200ac  2**0
                  CONTENTS
  4 .ARM          00000008  080039e4  080039e4  000139e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080039ec  080039ec  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039ec  080039ec  000139ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039f0  080039f0  000139f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  080039f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200ac  2**0
                  CONTENTS
 10 .bss          000000e8  200000ac  200000ac  000200ac  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000194  20000194  000200ac  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000abb3  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001958  00000000  00000000  0002ac8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ac8  00000000  00000000  0002c5e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000009f0  00000000  00000000  0002d0b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022229  00000000  00000000  0002daa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c231  00000000  00000000  0004fcc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5724  00000000  00000000  0005befa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013161e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000030a0  00000000  00000000  00131670  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000ac 	.word	0x200000ac
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003938 	.word	0x08003938

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000b0 	.word	0x200000b0
 80001cc:	08003938 	.word	0x08003938

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b590      	push	{r4, r7, lr}
 8000576:	b085      	sub	sp, #20
 8000578:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057a:	f000 fe61 	bl	8001240 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057e:	f000 f9d3 	bl	8000928 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000582:	f000 fadf 	bl	8000b44 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000586:	f000 fa39 	bl	80009fc <MX_ADC1_Init>
  MX_TIM1_Init();
 800058a:	f000 fa8b 	bl	8000aa4 <MX_TIM1_Init>

  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim1);
 800058e:	4890      	ldr	r0, [pc, #576]	; (80007d0 <main+0x25c>)
 8000590:	f002 fa4c 	bl	8002a2c <HAL_TIM_Base_Start>

  lcd_init();
 8000594:	f000 fcc7 	bl	8000f26 <lcd_init>
  lcd_put_cur(0,0);
 8000598:	2100      	movs	r1, #0
 800059a:	2000      	movs	r0, #0
 800059c:	f000 fca4 	bl	8000ee8 <lcd_put_cur>
  lcd_send_string("Loading...");
 80005a0:	488c      	ldr	r0, [pc, #560]	; (80007d4 <main+0x260>)
 80005a2:	f000 fcfd 	bl	8000fa0 <lcd_send_string>
  HAL_Delay(1000);
 80005a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005aa:	f000 febb 	bl	8001324 <HAL_Delay>
  lcd_clear();
 80005ae:	f000 fc91 	bl	8000ed4 <lcd_clear>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_ADC_Start(&hadc1);
 80005b2:	4889      	ldr	r0, [pc, #548]	; (80007d8 <main+0x264>)
 80005b4:	f000 ff1e 	bl	80013f4 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1,HAL_MAX_DELAY);
 80005b8:	f04f 31ff 	mov.w	r1, #4294967295
 80005bc:	4886      	ldr	r0, [pc, #536]	; (80007d8 <main+0x264>)
 80005be:	f000 ffeb 	bl	8001598 <HAL_ADC_PollForConversion>

	  Current_Value = HAL_ADC_GetValue(&hadc1);
 80005c2:	4885      	ldr	r0, [pc, #532]	; (80007d8 <main+0x264>)
 80005c4:	f001 f873 	bl	80016ae <HAL_ADC_GetValue>
 80005c8:	4603      	mov	r3, r0
 80005ca:	b29a      	uxth	r2, r3
 80005cc:	4b83      	ldr	r3, [pc, #524]	; (80007dc <main+0x268>)
 80005ce:	801a      	strh	r2, [r3, #0]

	  if(*Memory_pointer == 'A'){
 80005d0:	4b83      	ldr	r3, [pc, #524]	; (80007e0 <main+0x26c>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	2b41      	cmp	r3, #65	; 0x41
 80005da:	d13b      	bne.n	8000654 <main+0xe0>

		  lcd_put_cur(0, 0);
 80005dc:	2100      	movs	r1, #0
 80005de:	2000      	movs	r0, #0
 80005e0:	f000 fc82 	bl	8000ee8 <lcd_put_cur>
		  lcd_send_string("A:Ba Lm Hm Tr N");
 80005e4:	487f      	ldr	r0, [pc, #508]	; (80007e4 <main+0x270>)
 80005e6:	f000 fcdb 	bl	8000fa0 <lcd_send_string>
		  HAL_Delay(100);
 80005ea:	2064      	movs	r0, #100	; 0x64
 80005ec:	f000 fe9a 	bl	8001324 <HAL_Delay>

		  if(*Pot_pointer == 'B'){
 80005f0:	4b7d      	ldr	r3, [pc, #500]	; (80007e8 <main+0x274>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	2b42      	cmp	r3, #66	; 0x42
 80005fa:	d103      	bne.n	8000604 <main+0x90>
			  A_Settings[0] = Current_Value;
 80005fc:	4b77      	ldr	r3, [pc, #476]	; (80007dc <main+0x268>)
 80005fe:	881a      	ldrh	r2, [r3, #0]
 8000600:	4b7a      	ldr	r3, [pc, #488]	; (80007ec <main+0x278>)
 8000602:	801a      	strh	r2, [r3, #0]
		  }
		  if(*Pot_pointer == 'L'){
 8000604:	4b78      	ldr	r3, [pc, #480]	; (80007e8 <main+0x274>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	b2db      	uxtb	r3, r3
 800060c:	2b4c      	cmp	r3, #76	; 0x4c
 800060e:	d103      	bne.n	8000618 <main+0xa4>
			  A_Settings[1] = Current_Value;
 8000610:	4b72      	ldr	r3, [pc, #456]	; (80007dc <main+0x268>)
 8000612:	881a      	ldrh	r2, [r3, #0]
 8000614:	4b75      	ldr	r3, [pc, #468]	; (80007ec <main+0x278>)
 8000616:	805a      	strh	r2, [r3, #2]
		  }
		  if(*Pot_pointer == 'H'){
 8000618:	4b73      	ldr	r3, [pc, #460]	; (80007e8 <main+0x274>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	b2db      	uxtb	r3, r3
 8000620:	2b48      	cmp	r3, #72	; 0x48
 8000622:	d103      	bne.n	800062c <main+0xb8>
			  A_Settings[2] = Current_Value;
 8000624:	4b6d      	ldr	r3, [pc, #436]	; (80007dc <main+0x268>)
 8000626:	881a      	ldrh	r2, [r3, #0]
 8000628:	4b70      	ldr	r3, [pc, #448]	; (80007ec <main+0x278>)
 800062a:	809a      	strh	r2, [r3, #4]
		  }
		  if(*Pot_pointer == 'T'){
 800062c:	4b6e      	ldr	r3, [pc, #440]	; (80007e8 <main+0x274>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	b2db      	uxtb	r3, r3
 8000634:	2b54      	cmp	r3, #84	; 0x54
 8000636:	d103      	bne.n	8000640 <main+0xcc>
			  A_Settings[3] = Current_Value;
 8000638:	4b68      	ldr	r3, [pc, #416]	; (80007dc <main+0x268>)
 800063a:	881a      	ldrh	r2, [r3, #0]
 800063c:	4b6b      	ldr	r3, [pc, #428]	; (80007ec <main+0x278>)
 800063e:	80da      	strh	r2, [r3, #6]
		  }
		  if(*Pot_pointer == 'N'){
 8000640:	4b69      	ldr	r3, [pc, #420]	; (80007e8 <main+0x274>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	b2db      	uxtb	r3, r3
 8000648:	2b4e      	cmp	r3, #78	; 0x4e
 800064a:	d103      	bne.n	8000654 <main+0xe0>
			  A_Settings[4] = Current_Value;
 800064c:	4b63      	ldr	r3, [pc, #396]	; (80007dc <main+0x268>)
 800064e:	881a      	ldrh	r2, [r3, #0]
 8000650:	4b66      	ldr	r3, [pc, #408]	; (80007ec <main+0x278>)
 8000652:	811a      	strh	r2, [r3, #8]
		  }
	  }
	  if(*Memory_pointer == 'B'){
 8000654:	4b62      	ldr	r3, [pc, #392]	; (80007e0 <main+0x26c>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	b2db      	uxtb	r3, r3
 800065c:	2b42      	cmp	r3, #66	; 0x42
 800065e:	d13b      	bne.n	80006d8 <main+0x164>

		  lcd_put_cur(0, 0);
 8000660:	2100      	movs	r1, #0
 8000662:	2000      	movs	r0, #0
 8000664:	f000 fc40 	bl	8000ee8 <lcd_put_cur>
		  lcd_send_string("B:Ba Lm Hm Tr N");
 8000668:	4861      	ldr	r0, [pc, #388]	; (80007f0 <main+0x27c>)
 800066a:	f000 fc99 	bl	8000fa0 <lcd_send_string>
		  HAL_Delay(100);
 800066e:	2064      	movs	r0, #100	; 0x64
 8000670:	f000 fe58 	bl	8001324 <HAL_Delay>

	  	  if(*Pot_pointer == 'B'){
 8000674:	4b5c      	ldr	r3, [pc, #368]	; (80007e8 <main+0x274>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	b2db      	uxtb	r3, r3
 800067c:	2b42      	cmp	r3, #66	; 0x42
 800067e:	d103      	bne.n	8000688 <main+0x114>
	  		  B_Settings[0] = Current_Value;
 8000680:	4b56      	ldr	r3, [pc, #344]	; (80007dc <main+0x268>)
 8000682:	881a      	ldrh	r2, [r3, #0]
 8000684:	4b5b      	ldr	r3, [pc, #364]	; (80007f4 <main+0x280>)
 8000686:	801a      	strh	r2, [r3, #0]
	  	  }
	  	  if(*Pot_pointer == 'L'){
 8000688:	4b57      	ldr	r3, [pc, #348]	; (80007e8 <main+0x274>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	b2db      	uxtb	r3, r3
 8000690:	2b4c      	cmp	r3, #76	; 0x4c
 8000692:	d103      	bne.n	800069c <main+0x128>
	  		  B_Settings[1] = Current_Value;
 8000694:	4b51      	ldr	r3, [pc, #324]	; (80007dc <main+0x268>)
 8000696:	881a      	ldrh	r2, [r3, #0]
 8000698:	4b56      	ldr	r3, [pc, #344]	; (80007f4 <main+0x280>)
 800069a:	805a      	strh	r2, [r3, #2]
	  	  }
	  	  if(*Pot_pointer == 'H'){
 800069c:	4b52      	ldr	r3, [pc, #328]	; (80007e8 <main+0x274>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	2b48      	cmp	r3, #72	; 0x48
 80006a6:	d103      	bne.n	80006b0 <main+0x13c>
	  		  B_Settings[2] = Current_Value;
 80006a8:	4b4c      	ldr	r3, [pc, #304]	; (80007dc <main+0x268>)
 80006aa:	881a      	ldrh	r2, [r3, #0]
 80006ac:	4b51      	ldr	r3, [pc, #324]	; (80007f4 <main+0x280>)
 80006ae:	809a      	strh	r2, [r3, #4]
	  	  }
	  	  if(*Pot_pointer == 'T'){
 80006b0:	4b4d      	ldr	r3, [pc, #308]	; (80007e8 <main+0x274>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	2b54      	cmp	r3, #84	; 0x54
 80006ba:	d103      	bne.n	80006c4 <main+0x150>
	  		  B_Settings[3] = Current_Value;
 80006bc:	4b47      	ldr	r3, [pc, #284]	; (80007dc <main+0x268>)
 80006be:	881a      	ldrh	r2, [r3, #0]
 80006c0:	4b4c      	ldr	r3, [pc, #304]	; (80007f4 <main+0x280>)
 80006c2:	80da      	strh	r2, [r3, #6]
	  	  }
	  	  if(*Pot_pointer == 'N'){
 80006c4:	4b48      	ldr	r3, [pc, #288]	; (80007e8 <main+0x274>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	2b4e      	cmp	r3, #78	; 0x4e
 80006ce:	d103      	bne.n	80006d8 <main+0x164>
	  		  B_Settings[4] = Current_Value;
 80006d0:	4b42      	ldr	r3, [pc, #264]	; (80007dc <main+0x268>)
 80006d2:	881a      	ldrh	r2, [r3, #0]
 80006d4:	4b47      	ldr	r3, [pc, #284]	; (80007f4 <main+0x280>)
 80006d6:	811a      	strh	r2, [r3, #8]
	  	  }
	  }
	  if(*Memory_pointer == 'C'){
 80006d8:	4b41      	ldr	r3, [pc, #260]	; (80007e0 <main+0x26c>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	2b43      	cmp	r3, #67	; 0x43
 80006e2:	d13b      	bne.n	800075c <main+0x1e8>

		  lcd_put_cur(0, 0);
 80006e4:	2100      	movs	r1, #0
 80006e6:	2000      	movs	r0, #0
 80006e8:	f000 fbfe 	bl	8000ee8 <lcd_put_cur>
		  lcd_send_string("C:Ba Lm Hm Tr N");
 80006ec:	4842      	ldr	r0, [pc, #264]	; (80007f8 <main+0x284>)
 80006ee:	f000 fc57 	bl	8000fa0 <lcd_send_string>
		  HAL_Delay(100);
 80006f2:	2064      	movs	r0, #100	; 0x64
 80006f4:	f000 fe16 	bl	8001324 <HAL_Delay>

	  	  if(*Pot_pointer == 'B'){
 80006f8:	4b3b      	ldr	r3, [pc, #236]	; (80007e8 <main+0x274>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	2b42      	cmp	r3, #66	; 0x42
 8000702:	d103      	bne.n	800070c <main+0x198>
	  		  C_Settings[0] = Current_Value;
 8000704:	4b35      	ldr	r3, [pc, #212]	; (80007dc <main+0x268>)
 8000706:	881a      	ldrh	r2, [r3, #0]
 8000708:	4b3c      	ldr	r3, [pc, #240]	; (80007fc <main+0x288>)
 800070a:	801a      	strh	r2, [r3, #0]
	  	  }
	  	  if(*Pot_pointer == 'L'){
 800070c:	4b36      	ldr	r3, [pc, #216]	; (80007e8 <main+0x274>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	b2db      	uxtb	r3, r3
 8000714:	2b4c      	cmp	r3, #76	; 0x4c
 8000716:	d103      	bne.n	8000720 <main+0x1ac>
	  		  C_Settings[1] = Current_Value;
 8000718:	4b30      	ldr	r3, [pc, #192]	; (80007dc <main+0x268>)
 800071a:	881a      	ldrh	r2, [r3, #0]
 800071c:	4b37      	ldr	r3, [pc, #220]	; (80007fc <main+0x288>)
 800071e:	805a      	strh	r2, [r3, #2]
	  	  }
	  	  if(*Pot_pointer == 'H'){
 8000720:	4b31      	ldr	r3, [pc, #196]	; (80007e8 <main+0x274>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	b2db      	uxtb	r3, r3
 8000728:	2b48      	cmp	r3, #72	; 0x48
 800072a:	d103      	bne.n	8000734 <main+0x1c0>
	  		  C_Settings[2] = Current_Value;
 800072c:	4b2b      	ldr	r3, [pc, #172]	; (80007dc <main+0x268>)
 800072e:	881a      	ldrh	r2, [r3, #0]
 8000730:	4b32      	ldr	r3, [pc, #200]	; (80007fc <main+0x288>)
 8000732:	809a      	strh	r2, [r3, #4]
	  	  }
	  	  if(*Pot_pointer == 'T'){
 8000734:	4b2c      	ldr	r3, [pc, #176]	; (80007e8 <main+0x274>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	b2db      	uxtb	r3, r3
 800073c:	2b54      	cmp	r3, #84	; 0x54
 800073e:	d103      	bne.n	8000748 <main+0x1d4>
	  		  C_Settings[3] = Current_Value;
 8000740:	4b26      	ldr	r3, [pc, #152]	; (80007dc <main+0x268>)
 8000742:	881a      	ldrh	r2, [r3, #0]
 8000744:	4b2d      	ldr	r3, [pc, #180]	; (80007fc <main+0x288>)
 8000746:	80da      	strh	r2, [r3, #6]
	  	  }
	  	  if(*Pot_pointer == 'N'){
 8000748:	4b27      	ldr	r3, [pc, #156]	; (80007e8 <main+0x274>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	b2db      	uxtb	r3, r3
 8000750:	2b4e      	cmp	r3, #78	; 0x4e
 8000752:	d103      	bne.n	800075c <main+0x1e8>
	  		  C_Settings[4] = Current_Value;
 8000754:	4b21      	ldr	r3, [pc, #132]	; (80007dc <main+0x268>)
 8000756:	881a      	ldrh	r2, [r3, #0]
 8000758:	4b28      	ldr	r3, [pc, #160]	; (80007fc <main+0x288>)
 800075a:	811a      	strh	r2, [r3, #8]

	  	  }
	  }

	  if(*Memory_pointer == 'A'){
 800075c:	4b20      	ldr	r3, [pc, #128]	; (80007e0 <main+0x26c>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	b2db      	uxtb	r3, r3
 8000764:	2b41      	cmp	r3, #65	; 0x41
 8000766:	d159      	bne.n	800081c <main+0x2a8>
		  Ba = A_Settings[0];
 8000768:	4b20      	ldr	r3, [pc, #128]	; (80007ec <main+0x278>)
 800076a:	881b      	ldrh	r3, [r3, #0]
 800076c:	461a      	mov	r2, r3
 800076e:	4b24      	ldr	r3, [pc, #144]	; (8000800 <main+0x28c>)
 8000770:	601a      	str	r2, [r3, #0]
		  Lm = A_Settings[1];
 8000772:	4b1e      	ldr	r3, [pc, #120]	; (80007ec <main+0x278>)
 8000774:	885b      	ldrh	r3, [r3, #2]
 8000776:	461a      	mov	r2, r3
 8000778:	4b22      	ldr	r3, [pc, #136]	; (8000804 <main+0x290>)
 800077a:	601a      	str	r2, [r3, #0]
		  Hm = A_Settings[2];
 800077c:	4b1b      	ldr	r3, [pc, #108]	; (80007ec <main+0x278>)
 800077e:	889b      	ldrh	r3, [r3, #4]
 8000780:	461a      	mov	r2, r3
 8000782:	4b21      	ldr	r3, [pc, #132]	; (8000808 <main+0x294>)
 8000784:	601a      	str	r2, [r3, #0]
		  Tr = A_Settings[3];
 8000786:	4b19      	ldr	r3, [pc, #100]	; (80007ec <main+0x278>)
 8000788:	88db      	ldrh	r3, [r3, #6]
 800078a:	461a      	mov	r2, r3
 800078c:	4b1f      	ldr	r3, [pc, #124]	; (800080c <main+0x298>)
 800078e:	601a      	str	r2, [r3, #0]
		  N = A_Settings[4];
 8000790:	4b16      	ldr	r3, [pc, #88]	; (80007ec <main+0x278>)
 8000792:	891b      	ldrh	r3, [r3, #8]
 8000794:	461a      	mov	r2, r3
 8000796:	4b1e      	ldr	r3, [pc, #120]	; (8000810 <main+0x29c>)
 8000798:	601a      	str	r2, [r3, #0]

		  sprintf(Buffer, "  %d %d %d %d %d", Ba,Lm,Hm,Tr,N);
 800079a:	4b19      	ldr	r3, [pc, #100]	; (8000800 <main+0x28c>)
 800079c:	6818      	ldr	r0, [r3, #0]
 800079e:	4b19      	ldr	r3, [pc, #100]	; (8000804 <main+0x290>)
 80007a0:	681c      	ldr	r4, [r3, #0]
 80007a2:	4b19      	ldr	r3, [pc, #100]	; (8000808 <main+0x294>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	4a19      	ldr	r2, [pc, #100]	; (800080c <main+0x298>)
 80007a8:	6812      	ldr	r2, [r2, #0]
 80007aa:	4919      	ldr	r1, [pc, #100]	; (8000810 <main+0x29c>)
 80007ac:	6809      	ldr	r1, [r1, #0]
 80007ae:	9102      	str	r1, [sp, #8]
 80007b0:	9201      	str	r2, [sp, #4]
 80007b2:	9300      	str	r3, [sp, #0]
 80007b4:	4623      	mov	r3, r4
 80007b6:	4602      	mov	r2, r0
 80007b8:	4916      	ldr	r1, [pc, #88]	; (8000814 <main+0x2a0>)
 80007ba:	4817      	ldr	r0, [pc, #92]	; (8000818 <main+0x2a4>)
 80007bc:	f002 fc4e 	bl	800305c <siprintf>

		  lcd_put_cur(1, 0);
 80007c0:	2100      	movs	r1, #0
 80007c2:	2001      	movs	r0, #1
 80007c4:	f000 fb90 	bl	8000ee8 <lcd_put_cur>
		  lcd_send_string(Buffer);
 80007c8:	4813      	ldr	r0, [pc, #76]	; (8000818 <main+0x2a4>)
 80007ca:	f000 fbe9 	bl	8000fa0 <lcd_send_string>
 80007ce:	e092      	b.n	80008f6 <main+0x382>
 80007d0:	20000134 	.word	0x20000134
 80007d4:	08003950 	.word	0x08003950
 80007d8:	200000ec 	.word	0x200000ec
 80007dc:	20000014 	.word	0x20000014
 80007e0:	20000010 	.word	0x20000010
 80007e4:	0800395c 	.word	0x0800395c
 80007e8:	20000008 	.word	0x20000008
 80007ec:	20000018 	.word	0x20000018
 80007f0:	0800396c 	.word	0x0800396c
 80007f4:	20000024 	.word	0x20000024
 80007f8:	0800397c 	.word	0x0800397c
 80007fc:	20000030 	.word	0x20000030
 8000800:	200000d8 	.word	0x200000d8
 8000804:	200000dc 	.word	0x200000dc
 8000808:	200000e0 	.word	0x200000e0
 800080c:	200000e4 	.word	0x200000e4
 8000810:	200000e8 	.word	0x200000e8
 8000814:	0800398c 	.word	0x0800398c
 8000818:	200000c8 	.word	0x200000c8

	  } else if(*Memory_pointer == 'B'){
 800081c:	4b38      	ldr	r3, [pc, #224]	; (8000900 <main+0x38c>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	b2db      	uxtb	r3, r3
 8000824:	2b42      	cmp	r3, #66	; 0x42
 8000826:	d133      	bne.n	8000890 <main+0x31c>
		  Ba = B_Settings[0];
 8000828:	4b36      	ldr	r3, [pc, #216]	; (8000904 <main+0x390>)
 800082a:	881b      	ldrh	r3, [r3, #0]
 800082c:	461a      	mov	r2, r3
 800082e:	4b36      	ldr	r3, [pc, #216]	; (8000908 <main+0x394>)
 8000830:	601a      	str	r2, [r3, #0]
		  Lm = B_Settings[1];
 8000832:	4b34      	ldr	r3, [pc, #208]	; (8000904 <main+0x390>)
 8000834:	885b      	ldrh	r3, [r3, #2]
 8000836:	461a      	mov	r2, r3
 8000838:	4b34      	ldr	r3, [pc, #208]	; (800090c <main+0x398>)
 800083a:	601a      	str	r2, [r3, #0]
		  Hm = B_Settings[2];
 800083c:	4b31      	ldr	r3, [pc, #196]	; (8000904 <main+0x390>)
 800083e:	889b      	ldrh	r3, [r3, #4]
 8000840:	461a      	mov	r2, r3
 8000842:	4b33      	ldr	r3, [pc, #204]	; (8000910 <main+0x39c>)
 8000844:	601a      	str	r2, [r3, #0]
		  Tr = B_Settings[3];
 8000846:	4b2f      	ldr	r3, [pc, #188]	; (8000904 <main+0x390>)
 8000848:	88db      	ldrh	r3, [r3, #6]
 800084a:	461a      	mov	r2, r3
 800084c:	4b31      	ldr	r3, [pc, #196]	; (8000914 <main+0x3a0>)
 800084e:	601a      	str	r2, [r3, #0]
		  N = B_Settings[4];
 8000850:	4b2c      	ldr	r3, [pc, #176]	; (8000904 <main+0x390>)
 8000852:	891b      	ldrh	r3, [r3, #8]
 8000854:	461a      	mov	r2, r3
 8000856:	4b30      	ldr	r3, [pc, #192]	; (8000918 <main+0x3a4>)
 8000858:	601a      	str	r2, [r3, #0]

		  sprintf(Buffer, "  %d %d %d %d %d", Ba,Lm,Hm,Tr,N);
 800085a:	4b2b      	ldr	r3, [pc, #172]	; (8000908 <main+0x394>)
 800085c:	6818      	ldr	r0, [r3, #0]
 800085e:	4b2b      	ldr	r3, [pc, #172]	; (800090c <main+0x398>)
 8000860:	681c      	ldr	r4, [r3, #0]
 8000862:	4b2b      	ldr	r3, [pc, #172]	; (8000910 <main+0x39c>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4a2b      	ldr	r2, [pc, #172]	; (8000914 <main+0x3a0>)
 8000868:	6812      	ldr	r2, [r2, #0]
 800086a:	492b      	ldr	r1, [pc, #172]	; (8000918 <main+0x3a4>)
 800086c:	6809      	ldr	r1, [r1, #0]
 800086e:	9102      	str	r1, [sp, #8]
 8000870:	9201      	str	r2, [sp, #4]
 8000872:	9300      	str	r3, [sp, #0]
 8000874:	4623      	mov	r3, r4
 8000876:	4602      	mov	r2, r0
 8000878:	4928      	ldr	r1, [pc, #160]	; (800091c <main+0x3a8>)
 800087a:	4829      	ldr	r0, [pc, #164]	; (8000920 <main+0x3ac>)
 800087c:	f002 fbee 	bl	800305c <siprintf>
		  lcd_put_cur(1, 0);
 8000880:	2100      	movs	r1, #0
 8000882:	2001      	movs	r0, #1
 8000884:	f000 fb30 	bl	8000ee8 <lcd_put_cur>
		  lcd_send_string(Buffer);
 8000888:	4825      	ldr	r0, [pc, #148]	; (8000920 <main+0x3ac>)
 800088a:	f000 fb89 	bl	8000fa0 <lcd_send_string>
 800088e:	e032      	b.n	80008f6 <main+0x382>

	  }else {
		  Ba = C_Settings[0];
 8000890:	4b24      	ldr	r3, [pc, #144]	; (8000924 <main+0x3b0>)
 8000892:	881b      	ldrh	r3, [r3, #0]
 8000894:	461a      	mov	r2, r3
 8000896:	4b1c      	ldr	r3, [pc, #112]	; (8000908 <main+0x394>)
 8000898:	601a      	str	r2, [r3, #0]
		  Lm = C_Settings[1];
 800089a:	4b22      	ldr	r3, [pc, #136]	; (8000924 <main+0x3b0>)
 800089c:	885b      	ldrh	r3, [r3, #2]
 800089e:	461a      	mov	r2, r3
 80008a0:	4b1a      	ldr	r3, [pc, #104]	; (800090c <main+0x398>)
 80008a2:	601a      	str	r2, [r3, #0]
		  Hm = C_Settings[2];
 80008a4:	4b1f      	ldr	r3, [pc, #124]	; (8000924 <main+0x3b0>)
 80008a6:	889b      	ldrh	r3, [r3, #4]
 80008a8:	461a      	mov	r2, r3
 80008aa:	4b19      	ldr	r3, [pc, #100]	; (8000910 <main+0x39c>)
 80008ac:	601a      	str	r2, [r3, #0]
		  Tr = C_Settings[3];
 80008ae:	4b1d      	ldr	r3, [pc, #116]	; (8000924 <main+0x3b0>)
 80008b0:	88db      	ldrh	r3, [r3, #6]
 80008b2:	461a      	mov	r2, r3
 80008b4:	4b17      	ldr	r3, [pc, #92]	; (8000914 <main+0x3a0>)
 80008b6:	601a      	str	r2, [r3, #0]
		  N = C_Settings[4];
 80008b8:	4b1a      	ldr	r3, [pc, #104]	; (8000924 <main+0x3b0>)
 80008ba:	891b      	ldrh	r3, [r3, #8]
 80008bc:	461a      	mov	r2, r3
 80008be:	4b16      	ldr	r3, [pc, #88]	; (8000918 <main+0x3a4>)
 80008c0:	601a      	str	r2, [r3, #0]

		  sprintf(Buffer, "  %d %d %d %d %d", Ba,Lm,Hm,Tr,N);
 80008c2:	4b11      	ldr	r3, [pc, #68]	; (8000908 <main+0x394>)
 80008c4:	6818      	ldr	r0, [r3, #0]
 80008c6:	4b11      	ldr	r3, [pc, #68]	; (800090c <main+0x398>)
 80008c8:	681c      	ldr	r4, [r3, #0]
 80008ca:	4b11      	ldr	r3, [pc, #68]	; (8000910 <main+0x39c>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4a11      	ldr	r2, [pc, #68]	; (8000914 <main+0x3a0>)
 80008d0:	6812      	ldr	r2, [r2, #0]
 80008d2:	4911      	ldr	r1, [pc, #68]	; (8000918 <main+0x3a4>)
 80008d4:	6809      	ldr	r1, [r1, #0]
 80008d6:	9102      	str	r1, [sp, #8]
 80008d8:	9201      	str	r2, [sp, #4]
 80008da:	9300      	str	r3, [sp, #0]
 80008dc:	4623      	mov	r3, r4
 80008de:	4602      	mov	r2, r0
 80008e0:	490e      	ldr	r1, [pc, #56]	; (800091c <main+0x3a8>)
 80008e2:	480f      	ldr	r0, [pc, #60]	; (8000920 <main+0x3ac>)
 80008e4:	f002 fbba 	bl	800305c <siprintf>
		  //printf("%s", Current_Settings);

		  lcd_put_cur(1, 0);
 80008e8:	2100      	movs	r1, #0
 80008ea:	2001      	movs	r0, #1
 80008ec:	f000 fafc 	bl	8000ee8 <lcd_put_cur>
		  lcd_send_string(Buffer);
 80008f0:	480b      	ldr	r0, [pc, #44]	; (8000920 <main+0x3ac>)
 80008f2:	f000 fb55 	bl	8000fa0 <lcd_send_string>
	  }
	  HAL_Delay(100);
 80008f6:	2064      	movs	r0, #100	; 0x64
 80008f8:	f000 fd14 	bl	8001324 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 80008fc:	e659      	b.n	80005b2 <main+0x3e>
 80008fe:	bf00      	nop
 8000900:	20000010 	.word	0x20000010
 8000904:	20000024 	.word	0x20000024
 8000908:	200000d8 	.word	0x200000d8
 800090c:	200000dc 	.word	0x200000dc
 8000910:	200000e0 	.word	0x200000e0
 8000914:	200000e4 	.word	0x200000e4
 8000918:	200000e8 	.word	0x200000e8
 800091c:	0800398c 	.word	0x0800398c
 8000920:	200000c8 	.word	0x200000c8
 8000924:	20000030 	.word	0x20000030

08000928 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b094      	sub	sp, #80	; 0x50
 800092c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800092e:	f107 0320 	add.w	r3, r7, #32
 8000932:	2230      	movs	r2, #48	; 0x30
 8000934:	2100      	movs	r1, #0
 8000936:	4618      	mov	r0, r3
 8000938:	f002 fb88 	bl	800304c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800093c:	f107 030c 	add.w	r3, r7, #12
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
 8000948:	60da      	str	r2, [r3, #12]
 800094a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800094c:	2300      	movs	r3, #0
 800094e:	60bb      	str	r3, [r7, #8]
 8000950:	4b28      	ldr	r3, [pc, #160]	; (80009f4 <SystemClock_Config+0xcc>)
 8000952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000954:	4a27      	ldr	r2, [pc, #156]	; (80009f4 <SystemClock_Config+0xcc>)
 8000956:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800095a:	6413      	str	r3, [r2, #64]	; 0x40
 800095c:	4b25      	ldr	r3, [pc, #148]	; (80009f4 <SystemClock_Config+0xcc>)
 800095e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000960:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000964:	60bb      	str	r3, [r7, #8]
 8000966:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000968:	2300      	movs	r3, #0
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	4b22      	ldr	r3, [pc, #136]	; (80009f8 <SystemClock_Config+0xd0>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a21      	ldr	r2, [pc, #132]	; (80009f8 <SystemClock_Config+0xd0>)
 8000972:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000976:	6013      	str	r3, [r2, #0]
 8000978:	4b1f      	ldr	r3, [pc, #124]	; (80009f8 <SystemClock_Config+0xd0>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000980:	607b      	str	r3, [r7, #4]
 8000982:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000984:	2301      	movs	r3, #1
 8000986:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000988:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800098c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800098e:	2302      	movs	r3, #2
 8000990:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000992:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000996:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000998:	2308      	movs	r3, #8
 800099a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800099c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80009a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009a2:	2302      	movs	r3, #2
 80009a4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80009a6:	2307      	movs	r3, #7
 80009a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009aa:	f107 0320 	add.w	r3, r7, #32
 80009ae:	4618      	mov	r0, r3
 80009b0:	f001 fb88 	bl	80020c4 <HAL_RCC_OscConfig>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <SystemClock_Config+0x96>
  {
    Error_Handler();
 80009ba:	f000 f9e7 	bl	8000d8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009be:	230f      	movs	r3, #15
 80009c0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009c2:	2302      	movs	r3, #2
 80009c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009c6:	2300      	movs	r3, #0
 80009c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009d4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009d6:	f107 030c 	add.w	r3, r7, #12
 80009da:	2105      	movs	r1, #5
 80009dc:	4618      	mov	r0, r3
 80009de:	f001 fde9 	bl	80025b4 <HAL_RCC_ClockConfig>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80009e8:	f000 f9d0 	bl	8000d8c <Error_Handler>
  }
}
 80009ec:	bf00      	nop
 80009ee:	3750      	adds	r7, #80	; 0x50
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	40023800 	.word	0x40023800
 80009f8:	40007000 	.word	0x40007000

080009fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b084      	sub	sp, #16
 8000a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a02:	463b      	mov	r3, r7
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	605a      	str	r2, [r3, #4]
 8000a0a:	609a      	str	r2, [r3, #8]
 8000a0c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000a0e:	4b22      	ldr	r3, [pc, #136]	; (8000a98 <MX_ADC1_Init+0x9c>)
 8000a10:	4a22      	ldr	r2, [pc, #136]	; (8000a9c <MX_ADC1_Init+0xa0>)
 8000a12:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a14:	4b20      	ldr	r3, [pc, #128]	; (8000a98 <MX_ADC1_Init+0x9c>)
 8000a16:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a1a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_6B;
 8000a1c:	4b1e      	ldr	r3, [pc, #120]	; (8000a98 <MX_ADC1_Init+0x9c>)
 8000a1e:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 8000a22:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000a24:	4b1c      	ldr	r3, [pc, #112]	; (8000a98 <MX_ADC1_Init+0x9c>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a2a:	4b1b      	ldr	r3, [pc, #108]	; (8000a98 <MX_ADC1_Init+0x9c>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a30:	4b19      	ldr	r3, [pc, #100]	; (8000a98 <MX_ADC1_Init+0x9c>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a38:	4b17      	ldr	r3, [pc, #92]	; (8000a98 <MX_ADC1_Init+0x9c>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a3e:	4b16      	ldr	r3, [pc, #88]	; (8000a98 <MX_ADC1_Init+0x9c>)
 8000a40:	4a17      	ldr	r2, [pc, #92]	; (8000aa0 <MX_ADC1_Init+0xa4>)
 8000a42:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a44:	4b14      	ldr	r3, [pc, #80]	; (8000a98 <MX_ADC1_Init+0x9c>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000a4a:	4b13      	ldr	r3, [pc, #76]	; (8000a98 <MX_ADC1_Init+0x9c>)
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a50:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <MX_ADC1_Init+0x9c>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a58:	4b0f      	ldr	r3, [pc, #60]	; (8000a98 <MX_ADC1_Init+0x9c>)
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a5e:	480e      	ldr	r0, [pc, #56]	; (8000a98 <MX_ADC1_Init+0x9c>)
 8000a60:	f000 fc84 	bl	800136c <HAL_ADC_Init>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000a6a:	f000 f98f 	bl	8000d8c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000a72:	2301      	movs	r3, #1
 8000a74:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a76:	2300      	movs	r3, #0
 8000a78:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a7a:	463b      	mov	r3, r7
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4806      	ldr	r0, [pc, #24]	; (8000a98 <MX_ADC1_Init+0x9c>)
 8000a80:	f000 fe22 	bl	80016c8 <HAL_ADC_ConfigChannel>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000a8a:	f000 f97f 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a8e:	bf00      	nop
 8000a90:	3710      	adds	r7, #16
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	200000ec 	.word	0x200000ec
 8000a9c:	40012000 	.word	0x40012000
 8000aa0:	0f000001 	.word	0x0f000001

08000aa4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b086      	sub	sp, #24
 8000aa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aaa:	f107 0308 	add.w	r3, r7, #8
 8000aae:	2200      	movs	r2, #0
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	605a      	str	r2, [r3, #4]
 8000ab4:	609a      	str	r2, [r3, #8]
 8000ab6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ab8:	463b      	mov	r3, r7
 8000aba:	2200      	movs	r2, #0
 8000abc:	601a      	str	r2, [r3, #0]
 8000abe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ac0:	4b1e      	ldr	r3, [pc, #120]	; (8000b3c <MX_TIM1_Init+0x98>)
 8000ac2:	4a1f      	ldr	r2, [pc, #124]	; (8000b40 <MX_TIM1_Init+0x9c>)
 8000ac4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8000ac6:	4b1d      	ldr	r3, [pc, #116]	; (8000b3c <MX_TIM1_Init+0x98>)
 8000ac8:	2253      	movs	r2, #83	; 0x53
 8000aca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000acc:	4b1b      	ldr	r3, [pc, #108]	; (8000b3c <MX_TIM1_Init+0x98>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8000ad2:	4b1a      	ldr	r3, [pc, #104]	; (8000b3c <MX_TIM1_Init+0x98>)
 8000ad4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000ad8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ada:	4b18      	ldr	r3, [pc, #96]	; (8000b3c <MX_TIM1_Init+0x98>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ae0:	4b16      	ldr	r3, [pc, #88]	; (8000b3c <MX_TIM1_Init+0x98>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ae6:	4b15      	ldr	r3, [pc, #84]	; (8000b3c <MX_TIM1_Init+0x98>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000aec:	4813      	ldr	r0, [pc, #76]	; (8000b3c <MX_TIM1_Init+0x98>)
 8000aee:	f001 ff4d 	bl	800298c <HAL_TIM_Base_Init>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000af8:	f000 f948 	bl	8000d8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000afc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b00:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b02:	f107 0308 	add.w	r3, r7, #8
 8000b06:	4619      	mov	r1, r3
 8000b08:	480c      	ldr	r0, [pc, #48]	; (8000b3c <MX_TIM1_Init+0x98>)
 8000b0a:	f001 fff7 	bl	8002afc <HAL_TIM_ConfigClockSource>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000b14:	f000 f93a 	bl	8000d8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b20:	463b      	mov	r3, r7
 8000b22:	4619      	mov	r1, r3
 8000b24:	4805      	ldr	r0, [pc, #20]	; (8000b3c <MX_TIM1_Init+0x98>)
 8000b26:	f002 f9eb 	bl	8002f00 <HAL_TIMEx_MasterConfigSynchronization>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000b30:	f000 f92c 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000b34:	bf00      	nop
 8000b36:	3718      	adds	r7, #24
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20000134 	.word	0x20000134
 8000b40:	40010000 	.word	0x40010000

08000b44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b08c      	sub	sp, #48	; 0x30
 8000b48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4a:	f107 031c 	add.w	r3, r7, #28
 8000b4e:	2200      	movs	r2, #0
 8000b50:	601a      	str	r2, [r3, #0]
 8000b52:	605a      	str	r2, [r3, #4]
 8000b54:	609a      	str	r2, [r3, #8]
 8000b56:	60da      	str	r2, [r3, #12]
 8000b58:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	61bb      	str	r3, [r7, #24]
 8000b5e:	4b61      	ldr	r3, [pc, #388]	; (8000ce4 <MX_GPIO_Init+0x1a0>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	4a60      	ldr	r2, [pc, #384]	; (8000ce4 <MX_GPIO_Init+0x1a0>)
 8000b64:	f043 0304 	orr.w	r3, r3, #4
 8000b68:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6a:	4b5e      	ldr	r3, [pc, #376]	; (8000ce4 <MX_GPIO_Init+0x1a0>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	f003 0304 	and.w	r3, r3, #4
 8000b72:	61bb      	str	r3, [r7, #24]
 8000b74:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	617b      	str	r3, [r7, #20]
 8000b7a:	4b5a      	ldr	r3, [pc, #360]	; (8000ce4 <MX_GPIO_Init+0x1a0>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	4a59      	ldr	r2, [pc, #356]	; (8000ce4 <MX_GPIO_Init+0x1a0>)
 8000b80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b84:	6313      	str	r3, [r2, #48]	; 0x30
 8000b86:	4b57      	ldr	r3, [pc, #348]	; (8000ce4 <MX_GPIO_Init+0x1a0>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b8e:	617b      	str	r3, [r7, #20]
 8000b90:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	613b      	str	r3, [r7, #16]
 8000b96:	4b53      	ldr	r3, [pc, #332]	; (8000ce4 <MX_GPIO_Init+0x1a0>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	4a52      	ldr	r2, [pc, #328]	; (8000ce4 <MX_GPIO_Init+0x1a0>)
 8000b9c:	f043 0301 	orr.w	r3, r3, #1
 8000ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba2:	4b50      	ldr	r3, [pc, #320]	; (8000ce4 <MX_GPIO_Init+0x1a0>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	f003 0301 	and.w	r3, r3, #1
 8000baa:	613b      	str	r3, [r7, #16]
 8000bac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60fb      	str	r3, [r7, #12]
 8000bb2:	4b4c      	ldr	r3, [pc, #304]	; (8000ce4 <MX_GPIO_Init+0x1a0>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	4a4b      	ldr	r2, [pc, #300]	; (8000ce4 <MX_GPIO_Init+0x1a0>)
 8000bb8:	f043 0302 	orr.w	r3, r3, #2
 8000bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bbe:	4b49      	ldr	r3, [pc, #292]	; (8000ce4 <MX_GPIO_Init+0x1a0>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	f003 0302 	and.w	r3, r3, #2
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60bb      	str	r3, [r7, #8]
 8000bce:	4b45      	ldr	r3, [pc, #276]	; (8000ce4 <MX_GPIO_Init+0x1a0>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	4a44      	ldr	r2, [pc, #272]	; (8000ce4 <MX_GPIO_Init+0x1a0>)
 8000bd4:	f043 0310 	orr.w	r3, r3, #16
 8000bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bda:	4b42      	ldr	r3, [pc, #264]	; (8000ce4 <MX_GPIO_Init+0x1a0>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	f003 0310 	and.w	r3, r3, #16
 8000be2:	60bb      	str	r3, [r7, #8]
 8000be4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	607b      	str	r3, [r7, #4]
 8000bea:	4b3e      	ldr	r3, [pc, #248]	; (8000ce4 <MX_GPIO_Init+0x1a0>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	4a3d      	ldr	r2, [pc, #244]	; (8000ce4 <MX_GPIO_Init+0x1a0>)
 8000bf0:	f043 0308 	orr.w	r3, r3, #8
 8000bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf6:	4b3b      	ldr	r3, [pc, #236]	; (8000ce4 <MX_GPIO_Init+0x1a0>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	f003 0308 	and.w	r3, r3, #8
 8000bfe:	607b      	str	r3, [r7, #4]
 8000c00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_D7_Pin|LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin, GPIO_PIN_RESET);
 8000c02:	2200      	movs	r2, #0
 8000c04:	21aa      	movs	r1, #170	; 0xaa
 8000c06:	4838      	ldr	r0, [pc, #224]	; (8000ce8 <MX_GPIO_Init+0x1a4>)
 8000c08:	f001 fa2a 	bl	8002060 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_RS_Pin|LCD_RW_Pin|LCD_E_Pin, GPIO_PIN_RESET);
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	f44f 6128 	mov.w	r1, #2688	; 0xa80
 8000c12:	4836      	ldr	r0, [pc, #216]	; (8000cec <MX_GPIO_Init+0x1a8>)
 8000c14:	f001 fa24 	bl	8002060 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000c1e:	4834      	ldr	r0, [pc, #208]	; (8000cf0 <MX_GPIO_Init+0x1ac>)
 8000c20:	f001 fa1e 	bl	8002060 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c24:	2301      	movs	r3, #1
 8000c26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c28:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000c2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c32:	f107 031c 	add.w	r3, r7, #28
 8000c36:	4619      	mov	r1, r3
 8000c38:	482b      	ldr	r0, [pc, #172]	; (8000ce8 <MX_GPIO_Init+0x1a4>)
 8000c3a:	f001 f875 	bl	8001d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D7_Pin LCD_D6_Pin LCD_D5_Pin LCD_D4_Pin */
  GPIO_InitStruct.Pin = LCD_D7_Pin|LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin;
 8000c3e:	23aa      	movs	r3, #170	; 0xaa
 8000c40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c42:	2301      	movs	r3, #1
 8000c44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4e:	f107 031c 	add.w	r3, r7, #28
 8000c52:	4619      	mov	r1, r3
 8000c54:	4824      	ldr	r0, [pc, #144]	; (8000ce8 <MX_GPIO_Init+0x1a4>)
 8000c56:	f001 f867 	bl	8001d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000c5a:	2304      	movs	r3, #4
 8000c5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000c66:	f107 031c 	add.w	r3, r7, #28
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4821      	ldr	r0, [pc, #132]	; (8000cf4 <MX_GPIO_Init+0x1b0>)
 8000c6e:	f001 f85b 	bl	8001d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RS_Pin LCD_RW_Pin LCD_E_Pin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_RW_Pin|LCD_E_Pin;
 8000c72:	f44f 6328 	mov.w	r3, #2688	; 0xa80
 8000c76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c80:	2300      	movs	r3, #0
 8000c82:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c84:	f107 031c 	add.w	r3, r7, #28
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4818      	ldr	r0, [pc, #96]	; (8000cec <MX_GPIO_Init+0x1a8>)
 8000c8c:	f001 f84c 	bl	8001d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 8000c90:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000c94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c96:	2301      	movs	r3, #1
 8000c98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ca2:	f107 031c 	add.w	r3, r7, #28
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4811      	ldr	r0, [pc, #68]	; (8000cf0 <MX_GPIO_Init+0x1ac>)
 8000caa:	f001 f83d 	bl	8001d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button_1_Pin Button_2_Pin Button_3_Pin */
  GPIO_InitStruct.Pin = Button_1_Pin|Button_2_Pin|Button_3_Pin;
 8000cae:	f44f 4324 	mov.w	r3, #41984	; 0xa400
 8000cb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cb4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000cb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cbe:	f107 031c 	add.w	r3, r7, #28
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4808      	ldr	r0, [pc, #32]	; (8000ce8 <MX_GPIO_Init+0x1a4>)
 8000cc6:	f001 f82f 	bl	8001d28 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2100      	movs	r1, #0
 8000cce:	2028      	movs	r0, #40	; 0x28
 8000cd0:	f000 fff3 	bl	8001cba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000cd4:	2028      	movs	r0, #40	; 0x28
 8000cd6:	f001 f80c 	bl	8001cf2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cda:	bf00      	nop
 8000cdc:	3730      	adds	r7, #48	; 0x30
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	40023800 	.word	0x40023800
 8000ce8:	40020000 	.word	0x40020000
 8000cec:	40021000 	.word	0x40021000
 8000cf0:	40020c00 	.word	0x40020c00
 8000cf4:	40020400 	.word	0x40020400

08000cf8 <HAL_GPIO_EXTI_Callback>:


/*BUTTONS	These are ISRs to allow the user to cycle through memory slots and pot selections
 *
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	80fb      	strh	r3, [r7, #6]
	/*
	the if else statements check whether the pointer is at the end of the array
	to reset its position to the beginning
	*/
	if(GPIO_Pin == Button_1_Pin){
 8000d02:	88fb      	ldrh	r3, [r7, #6]
 8000d04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d08:	d10d      	bne.n	8000d26 <HAL_GPIO_EXTI_Callback+0x2e>
		if(Pot_pointer > Pot_Choice +  40){
 8000d0a:	4b19      	ldr	r3, [pc, #100]	; (8000d70 <HAL_GPIO_EXTI_Callback+0x78>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a19      	ldr	r2, [pc, #100]	; (8000d74 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d903      	bls.n	8000d1c <HAL_GPIO_EXTI_Callback+0x24>
			Pot_pointer = Pot_Choice;
 8000d14:	4b16      	ldr	r3, [pc, #88]	; (8000d70 <HAL_GPIO_EXTI_Callback+0x78>)
 8000d16:	4a18      	ldr	r2, [pc, #96]	; (8000d78 <HAL_GPIO_EXTI_Callback+0x80>)
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	e004      	b.n	8000d26 <HAL_GPIO_EXTI_Callback+0x2e>
		}
		else {
			Pot_pointer++;	//increments pointer position to next digital potentiometer
 8000d1c:	4b14      	ldr	r3, [pc, #80]	; (8000d70 <HAL_GPIO_EXTI_Callback+0x78>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	3301      	adds	r3, #1
 8000d22:	4a13      	ldr	r2, [pc, #76]	; (8000d70 <HAL_GPIO_EXTI_Callback+0x78>)
 8000d24:	6013      	str	r3, [r2, #0]
		}
	}
	if(GPIO_Pin == Button_2_Pin){
 8000d26:	88fb      	ldrh	r3, [r7, #6]
 8000d28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d2c:	d113      	bne.n	8000d56 <HAL_GPIO_EXTI_Callback+0x5e>
		if(Memory_pointer > Memory_Choice + 24){
 8000d2e:	4b13      	ldr	r3, [pc, #76]	; (8000d7c <HAL_GPIO_EXTI_Callback+0x84>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a13      	ldr	r2, [pc, #76]	; (8000d80 <HAL_GPIO_EXTI_Callback+0x88>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d906      	bls.n	8000d46 <HAL_GPIO_EXTI_Callback+0x4e>
			Memory_pointer = Memory_Choice;
 8000d38:	4b10      	ldr	r3, [pc, #64]	; (8000d7c <HAL_GPIO_EXTI_Callback+0x84>)
 8000d3a:	4a12      	ldr	r2, [pc, #72]	; (8000d84 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000d3c:	601a      	str	r2, [r3, #0]
			Pot_pointer = Pot_Choice + 32;	// Moves the pot select to 'N' which is inactive
 8000d3e:	4a12      	ldr	r2, [pc, #72]	; (8000d88 <HAL_GPIO_EXTI_Callback+0x90>)
 8000d40:	4b0b      	ldr	r3, [pc, #44]	; (8000d70 <HAL_GPIO_EXTI_Callback+0x78>)
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	e007      	b.n	8000d56 <HAL_GPIO_EXTI_Callback+0x5e>
		}
		else {
			Memory_pointer++;	//increments the memory slot
 8000d46:	4b0d      	ldr	r3, [pc, #52]	; (8000d7c <HAL_GPIO_EXTI_Callback+0x84>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	4a0b      	ldr	r2, [pc, #44]	; (8000d7c <HAL_GPIO_EXTI_Callback+0x84>)
 8000d4e:	6013      	str	r3, [r2, #0]
			Pot_pointer = Pot_Choice + 32;	// Moves the pot select to 'N' which is inactive
 8000d50:	4a0d      	ldr	r2, [pc, #52]	; (8000d88 <HAL_GPIO_EXTI_Callback+0x90>)
 8000d52:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <HAL_GPIO_EXTI_Callback+0x78>)
 8000d54:	601a      	str	r2, [r3, #0]
		}
	}
	if(GPIO_Pin == Button_3_Pin){
 8000d56:	88fb      	ldrh	r3, [r7, #6]
 8000d58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000d5c:	d102      	bne.n	8000d64 <HAL_GPIO_EXTI_Callback+0x6c>
		Pot_pointer = Pot_Choice + 32;	// Moves the pot select to 'N' which is inactive
 8000d5e:	4a0a      	ldr	r2, [pc, #40]	; (8000d88 <HAL_GPIO_EXTI_Callback+0x90>)
 8000d60:	4b03      	ldr	r3, [pc, #12]	; (8000d70 <HAL_GPIO_EXTI_Callback+0x78>)
 8000d62:	601a      	str	r2, [r3, #0]
	}
}
 8000d64:	bf00      	nop
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	20000008 	.word	0x20000008
 8000d74:	20000028 	.word	0x20000028
 8000d78:	20000000 	.word	0x20000000
 8000d7c:	20000010 	.word	0x20000010
 8000d80:	20000024 	.word	0x20000024
 8000d84:	2000000c 	.word	0x2000000c
 8000d88:	20000020 	.word	0x20000020

08000d8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d90:	b672      	cpsid	i
}
 8000d92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d94:	e7fe      	b.n	8000d94 <Error_Handler+0x8>
	...

08000d98 <delay>:
#define timer htim1


extern TIM_HandleTypeDef timer;
void delay (uint16_t us)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&timer, 0);
 8000da2:	4b09      	ldr	r3, [pc, #36]	; (8000dc8 <delay+0x30>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	2200      	movs	r2, #0
 8000da8:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&timer) < us);
 8000daa:	bf00      	nop
 8000dac:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <delay+0x30>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000db2:	88fb      	ldrh	r3, [r7, #6]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	d3f9      	bcc.n	8000dac <delay+0x14>
}
 8000db8:	bf00      	nop
 8000dba:	bf00      	nop
 8000dbc:	370c      	adds	r7, #12
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	20000134 	.word	0x20000134

08000dcc <send_to_lcd>:

/****************************************************************************************************************************************************************/

void send_to_lcd (char data, int rs)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	6039      	str	r1, [r7, #0]
 8000dd6:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rs);  // rs = 1 for data, rs=0 for command
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	461a      	mov	r2, r3
 8000dde:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000de2:	4820      	ldr	r0, [pc, #128]	; (8000e64 <send_to_lcd+0x98>)
 8000de4:	f001 f93c 	bl	8002060 <HAL_GPIO_WritePin>

	/* write the data to the respective pin */
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((data>>3)&0x01));
 8000de8:	79fb      	ldrb	r3, [r7, #7]
 8000dea:	08db      	lsrs	r3, r3, #3
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	f003 0301 	and.w	r3, r3, #1
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	461a      	mov	r2, r3
 8000df6:	2102      	movs	r1, #2
 8000df8:	481b      	ldr	r0, [pc, #108]	; (8000e68 <send_to_lcd+0x9c>)
 8000dfa:	f001 f931 	bl	8002060 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, ((data>>2)&0x01));
 8000dfe:	79fb      	ldrb	r3, [r7, #7]
 8000e00:	089b      	lsrs	r3, r3, #2
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	f003 0301 	and.w	r3, r3, #1
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	2108      	movs	r1, #8
 8000e0e:	4816      	ldr	r0, [pc, #88]	; (8000e68 <send_to_lcd+0x9c>)
 8000e10:	f001 f926 	bl	8002060 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, ((data>>1)&0x01));
 8000e14:	79fb      	ldrb	r3, [r7, #7]
 8000e16:	085b      	lsrs	r3, r3, #1
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	f003 0301 	and.w	r3, r3, #1
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	461a      	mov	r2, r3
 8000e22:	2120      	movs	r1, #32
 8000e24:	4810      	ldr	r0, [pc, #64]	; (8000e68 <send_to_lcd+0x9c>)
 8000e26:	f001 f91b 	bl	8002060 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, ((data>>0)&0x01));
 8000e2a:	79fb      	ldrb	r3, [r7, #7]
 8000e2c:	f003 0301 	and.w	r3, r3, #1
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	461a      	mov	r2, r3
 8000e34:	2180      	movs	r1, #128	; 0x80
 8000e36:	480c      	ldr	r0, [pc, #48]	; (8000e68 <send_to_lcd+0x9c>)
 8000e38:	f001 f912 	bl	8002060 <HAL_GPIO_WritePin>

	/* Toggle EN PIN to send the data
	 * if the HCLK > 100 MHz, use the  20 us delay
	 * if the LCD still doesn't work, increase the delay to 50, 80 or 100..
	 */
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	2180      	movs	r1, #128	; 0x80
 8000e40:	4808      	ldr	r0, [pc, #32]	; (8000e64 <send_to_lcd+0x98>)
 8000e42:	f001 f90d 	bl	8002060 <HAL_GPIO_WritePin>
	delay (50);  // ad
 8000e46:	2032      	movs	r0, #50	; 0x32
 8000e48:	f7ff ffa6 	bl	8000d98 <delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 0);
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	2180      	movs	r1, #128	; 0x80
 8000e50:	4804      	ldr	r0, [pc, #16]	; (8000e64 <send_to_lcd+0x98>)
 8000e52:	f001 f905 	bl	8002060 <HAL_GPIO_WritePin>
	delay (50);  // ad
 8000e56:	2032      	movs	r0, #50	; 0x32
 8000e58:	f7ff ff9e 	bl	8000d98 <delay>
}
 8000e5c:	bf00      	nop
 8000e5e:	3708      	adds	r7, #8
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	40021000 	.word	0x40021000
 8000e68:	40020000 	.word	0x40020000

08000e6c <lcd_send_cmd>:

void lcd_send_cmd (char cmd)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	71fb      	strb	r3, [r7, #7]
    char datatosend;

    /* send upper nibble first */
    datatosend = ((cmd>>4)&0x0f);
 8000e76:	79fb      	ldrb	r3, [r7, #7]
 8000e78:	091b      	lsrs	r3, r3, #4
 8000e7a:	73fb      	strb	r3, [r7, #15]
    send_to_lcd(datatosend,0);  // RS must be 0 while sending command
 8000e7c:	7bfb      	ldrb	r3, [r7, #15]
 8000e7e:	2100      	movs	r1, #0
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff ffa3 	bl	8000dcc <send_to_lcd>

    /* send Lower Nibble */
    datatosend = ((cmd)&0x0f);
 8000e86:	79fb      	ldrb	r3, [r7, #7]
 8000e88:	f003 030f 	and.w	r3, r3, #15
 8000e8c:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 0);
 8000e8e:	7bfb      	ldrb	r3, [r7, #15]
 8000e90:	2100      	movs	r1, #0
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff ff9a 	bl	8000dcc <send_to_lcd>
}
 8000e98:	bf00      	nop
 8000e9a:	3710      	adds	r7, #16
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	71fb      	strb	r3, [r7, #7]
	char datatosend;

	/* send higher nibble */
	datatosend = ((data>>4)&0x0f);
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	091b      	lsrs	r3, r3, #4
 8000eae:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);  // rs =1 for sending data
 8000eb0:	7bfb      	ldrb	r3, [r7, #15]
 8000eb2:	2101      	movs	r1, #1
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff ff89 	bl	8000dcc <send_to_lcd>

	/* send Lower nibble */
	datatosend = ((data)&0x0f);
 8000eba:	79fb      	ldrb	r3, [r7, #7]
 8000ebc:	f003 030f 	and.w	r3, r3, #15
 8000ec0:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);
 8000ec2:	7bfb      	ldrb	r3, [r7, #15]
 8000ec4:	2101      	movs	r1, #1
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f7ff ff80 	bl	8000dcc <send_to_lcd>
}
 8000ecc:	bf00      	nop
 8000ece:	3710      	adds	r7, #16
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <lcd_clear>:

void lcd_clear (void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 8000ed8:	2001      	movs	r0, #1
 8000eda:	f7ff ffc7 	bl	8000e6c <lcd_send_cmd>
	HAL_Delay(2);
 8000ede:	2002      	movs	r0, #2
 8000ee0:	f000 fa20 	bl	8001324 <HAL_Delay>
}
 8000ee4:	bf00      	nop
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	6039      	str	r1, [r7, #0]
    switch (row)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d003      	beq.n	8000f00 <lcd_put_cur+0x18>
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d005      	beq.n	8000f0a <lcd_put_cur+0x22>
 8000efe:	e009      	b.n	8000f14 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f06:	603b      	str	r3, [r7, #0]
            break;
 8000f08:	e004      	b.n	8000f14 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000f10:	603b      	str	r3, [r7, #0]
            break;
 8000f12:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff ffa7 	bl	8000e6c <lcd_send_cmd>
}
 8000f1e:	bf00      	nop
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <lcd_init>:


void lcd_init (void)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000f2a:	2032      	movs	r0, #50	; 0x32
 8000f2c:	f000 f9fa 	bl	8001324 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000f30:	2030      	movs	r0, #48	; 0x30
 8000f32:	f7ff ff9b 	bl	8000e6c <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000f36:	2005      	movs	r0, #5
 8000f38:	f000 f9f4 	bl	8001324 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000f3c:	2030      	movs	r0, #48	; 0x30
 8000f3e:	f7ff ff95 	bl	8000e6c <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000f42:	2001      	movs	r0, #1
 8000f44:	f000 f9ee 	bl	8001324 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000f48:	2030      	movs	r0, #48	; 0x30
 8000f4a:	f7ff ff8f 	bl	8000e6c <lcd_send_cmd>
	HAL_Delay(10);
 8000f4e:	200a      	movs	r0, #10
 8000f50:	f000 f9e8 	bl	8001324 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000f54:	2020      	movs	r0, #32
 8000f56:	f7ff ff89 	bl	8000e6c <lcd_send_cmd>
	HAL_Delay(10);
 8000f5a:	200a      	movs	r0, #10
 8000f5c:	f000 f9e2 	bl	8001324 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000f60:	2028      	movs	r0, #40	; 0x28
 8000f62:	f7ff ff83 	bl	8000e6c <lcd_send_cmd>
	HAL_Delay(1);
 8000f66:	2001      	movs	r0, #1
 8000f68:	f000 f9dc 	bl	8001324 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000f6c:	2008      	movs	r0, #8
 8000f6e:	f7ff ff7d 	bl	8000e6c <lcd_send_cmd>
	HAL_Delay(1);
 8000f72:	2001      	movs	r0, #1
 8000f74:	f000 f9d6 	bl	8001324 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000f78:	2001      	movs	r0, #1
 8000f7a:	f7ff ff77 	bl	8000e6c <lcd_send_cmd>
	HAL_Delay(1);
 8000f7e:	2001      	movs	r0, #1
 8000f80:	f000 f9d0 	bl	8001324 <HAL_Delay>
	HAL_Delay(1);
 8000f84:	2001      	movs	r0, #1
 8000f86:	f000 f9cd 	bl	8001324 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000f8a:	2006      	movs	r0, #6
 8000f8c:	f7ff ff6e 	bl	8000e6c <lcd_send_cmd>
	HAL_Delay(1);
 8000f90:	2001      	movs	r0, #1
 8000f92:	f000 f9c7 	bl	8001324 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000f96:	200c      	movs	r0, #12
 8000f98:	f7ff ff68 	bl	8000e6c <lcd_send_cmd>
}
 8000f9c:	bf00      	nop
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000fa8:	e006      	b.n	8000fb8 <lcd_send_string+0x18>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	1c5a      	adds	r2, r3, #1
 8000fae:	607a      	str	r2, [r7, #4]
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff ff74 	bl	8000ea0 <lcd_send_data>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d1f4      	bne.n	8000faa <lcd_send_string+0xa>
}
 8000fc0:	bf00      	nop
 8000fc2:	bf00      	nop
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
	...

08000fcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	607b      	str	r3, [r7, #4]
 8000fd6:	4b10      	ldr	r3, [pc, #64]	; (8001018 <HAL_MspInit+0x4c>)
 8000fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fda:	4a0f      	ldr	r2, [pc, #60]	; (8001018 <HAL_MspInit+0x4c>)
 8000fdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fe0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fe2:	4b0d      	ldr	r3, [pc, #52]	; (8001018 <HAL_MspInit+0x4c>)
 8000fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fea:	607b      	str	r3, [r7, #4]
 8000fec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	603b      	str	r3, [r7, #0]
 8000ff2:	4b09      	ldr	r3, [pc, #36]	; (8001018 <HAL_MspInit+0x4c>)
 8000ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff6:	4a08      	ldr	r2, [pc, #32]	; (8001018 <HAL_MspInit+0x4c>)
 8000ff8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ffc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ffe:	4b06      	ldr	r3, [pc, #24]	; (8001018 <HAL_MspInit+0x4c>)
 8001000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001006:	603b      	str	r3, [r7, #0]
 8001008:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800100a:	2007      	movs	r0, #7
 800100c:	f000 fe4a 	bl	8001ca4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001010:	bf00      	nop
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	40023800 	.word	0x40023800

0800101c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08a      	sub	sp, #40	; 0x28
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001024:	f107 0314 	add.w	r3, r7, #20
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	60da      	str	r2, [r3, #12]
 8001032:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a17      	ldr	r2, [pc, #92]	; (8001098 <HAL_ADC_MspInit+0x7c>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d127      	bne.n	800108e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	613b      	str	r3, [r7, #16]
 8001042:	4b16      	ldr	r3, [pc, #88]	; (800109c <HAL_ADC_MspInit+0x80>)
 8001044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001046:	4a15      	ldr	r2, [pc, #84]	; (800109c <HAL_ADC_MspInit+0x80>)
 8001048:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800104c:	6453      	str	r3, [r2, #68]	; 0x44
 800104e:	4b13      	ldr	r3, [pc, #76]	; (800109c <HAL_ADC_MspInit+0x80>)
 8001050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001056:	613b      	str	r3, [r7, #16]
 8001058:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	4b0f      	ldr	r3, [pc, #60]	; (800109c <HAL_ADC_MspInit+0x80>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	4a0e      	ldr	r2, [pc, #56]	; (800109c <HAL_ADC_MspInit+0x80>)
 8001064:	f043 0301 	orr.w	r3, r3, #1
 8001068:	6313      	str	r3, [r2, #48]	; 0x30
 800106a:	4b0c      	ldr	r3, [pc, #48]	; (800109c <HAL_ADC_MspInit+0x80>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001076:	2304      	movs	r3, #4
 8001078:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800107a:	2303      	movs	r3, #3
 800107c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001082:	f107 0314 	add.w	r3, r7, #20
 8001086:	4619      	mov	r1, r3
 8001088:	4805      	ldr	r0, [pc, #20]	; (80010a0 <HAL_ADC_MspInit+0x84>)
 800108a:	f000 fe4d 	bl	8001d28 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800108e:	bf00      	nop
 8001090:	3728      	adds	r7, #40	; 0x28
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40012000 	.word	0x40012000
 800109c:	40023800 	.word	0x40023800
 80010a0:	40020000 	.word	0x40020000

080010a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b085      	sub	sp, #20
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a0b      	ldr	r2, [pc, #44]	; (80010e0 <HAL_TIM_Base_MspInit+0x3c>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d10d      	bne.n	80010d2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	4b0a      	ldr	r3, [pc, #40]	; (80010e4 <HAL_TIM_Base_MspInit+0x40>)
 80010bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010be:	4a09      	ldr	r2, [pc, #36]	; (80010e4 <HAL_TIM_Base_MspInit+0x40>)
 80010c0:	f043 0301 	orr.w	r3, r3, #1
 80010c4:	6453      	str	r3, [r2, #68]	; 0x44
 80010c6:	4b07      	ldr	r3, [pc, #28]	; (80010e4 <HAL_TIM_Base_MspInit+0x40>)
 80010c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ca:	f003 0301 	and.w	r3, r3, #1
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80010d2:	bf00      	nop
 80010d4:	3714      	adds	r7, #20
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	40010000 	.word	0x40010000
 80010e4:	40023800 	.word	0x40023800

080010e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010ec:	e7fe      	b.n	80010ec <NMI_Handler+0x4>

080010ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ee:	b480      	push	{r7}
 80010f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010f2:	e7fe      	b.n	80010f2 <HardFault_Handler+0x4>

080010f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010f8:	e7fe      	b.n	80010f8 <MemManage_Handler+0x4>

080010fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010fa:	b480      	push	{r7}
 80010fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010fe:	e7fe      	b.n	80010fe <BusFault_Handler+0x4>

08001100 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001104:	e7fe      	b.n	8001104 <UsageFault_Handler+0x4>

08001106 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001106:	b480      	push	{r7}
 8001108:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800110a:	bf00      	nop
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001118:	bf00      	nop
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr

08001122 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001122:	b480      	push	{r7}
 8001124:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001126:	bf00      	nop
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001134:	f000 f8d6 	bl	80012e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001138:	bf00      	nop
 800113a:	bd80      	pop	{r7, pc}

0800113c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_1_Pin);
 8001140:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001144:	f000 ffa6 	bl	8002094 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Button_2_Pin);
 8001148:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800114c:	f000 ffa2 	bl	8002094 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Button_3_Pin);
 8001150:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001154:	f000 ff9e 	bl	8002094 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001158:	bf00      	nop
 800115a:	bd80      	pop	{r7, pc}

0800115c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001164:	4a14      	ldr	r2, [pc, #80]	; (80011b8 <_sbrk+0x5c>)
 8001166:	4b15      	ldr	r3, [pc, #84]	; (80011bc <_sbrk+0x60>)
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001170:	4b13      	ldr	r3, [pc, #76]	; (80011c0 <_sbrk+0x64>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d102      	bne.n	800117e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001178:	4b11      	ldr	r3, [pc, #68]	; (80011c0 <_sbrk+0x64>)
 800117a:	4a12      	ldr	r2, [pc, #72]	; (80011c4 <_sbrk+0x68>)
 800117c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800117e:	4b10      	ldr	r3, [pc, #64]	; (80011c0 <_sbrk+0x64>)
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4413      	add	r3, r2
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	429a      	cmp	r2, r3
 800118a:	d207      	bcs.n	800119c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800118c:	f001 ff34 	bl	8002ff8 <__errno>
 8001190:	4603      	mov	r3, r0
 8001192:	220c      	movs	r2, #12
 8001194:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001196:	f04f 33ff 	mov.w	r3, #4294967295
 800119a:	e009      	b.n	80011b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800119c:	4b08      	ldr	r3, [pc, #32]	; (80011c0 <_sbrk+0x64>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011a2:	4b07      	ldr	r3, [pc, #28]	; (80011c0 <_sbrk+0x64>)
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4413      	add	r3, r2
 80011aa:	4a05      	ldr	r2, [pc, #20]	; (80011c0 <_sbrk+0x64>)
 80011ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011ae:	68fb      	ldr	r3, [r7, #12]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3718      	adds	r7, #24
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	20020000 	.word	0x20020000
 80011bc:	00000400 	.word	0x00000400
 80011c0:	2000017c 	.word	0x2000017c
 80011c4:	20000198 	.word	0x20000198

080011c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011cc:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <SystemInit+0x20>)
 80011ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011d2:	4a05      	ldr	r2, [pc, #20]	; (80011e8 <SystemInit+0x20>)
 80011d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011dc:	bf00      	nop
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	e000ed00 	.word	0xe000ed00

080011ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80011ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001224 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011f0:	480d      	ldr	r0, [pc, #52]	; (8001228 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011f2:	490e      	ldr	r1, [pc, #56]	; (800122c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011f4:	4a0e      	ldr	r2, [pc, #56]	; (8001230 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011f8:	e002      	b.n	8001200 <LoopCopyDataInit>

080011fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011fe:	3304      	adds	r3, #4

08001200 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001200:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001202:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001204:	d3f9      	bcc.n	80011fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001206:	4a0b      	ldr	r2, [pc, #44]	; (8001234 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001208:	4c0b      	ldr	r4, [pc, #44]	; (8001238 <LoopFillZerobss+0x26>)
  movs r3, #0
 800120a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800120c:	e001      	b.n	8001212 <LoopFillZerobss>

0800120e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800120e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001210:	3204      	adds	r2, #4

08001212 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001212:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001214:	d3fb      	bcc.n	800120e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001216:	f7ff ffd7 	bl	80011c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800121a:	f001 fef3 	bl	8003004 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800121e:	f7ff f9a9 	bl	8000574 <main>
  bx  lr    
 8001222:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001224:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001228:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800122c:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 8001230:	080039f4 	.word	0x080039f4
  ldr r2, =_sbss
 8001234:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 8001238:	20000194 	.word	0x20000194

0800123c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800123c:	e7fe      	b.n	800123c <ADC_IRQHandler>
	...

08001240 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001244:	4b0e      	ldr	r3, [pc, #56]	; (8001280 <HAL_Init+0x40>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a0d      	ldr	r2, [pc, #52]	; (8001280 <HAL_Init+0x40>)
 800124a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800124e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001250:	4b0b      	ldr	r3, [pc, #44]	; (8001280 <HAL_Init+0x40>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a0a      	ldr	r2, [pc, #40]	; (8001280 <HAL_Init+0x40>)
 8001256:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800125a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800125c:	4b08      	ldr	r3, [pc, #32]	; (8001280 <HAL_Init+0x40>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a07      	ldr	r2, [pc, #28]	; (8001280 <HAL_Init+0x40>)
 8001262:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001266:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001268:	2003      	movs	r0, #3
 800126a:	f000 fd1b 	bl	8001ca4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800126e:	2000      	movs	r0, #0
 8001270:	f000 f808 	bl	8001284 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001274:	f7ff feaa 	bl	8000fcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001278:	2300      	movs	r3, #0
}
 800127a:	4618      	mov	r0, r3
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	40023c00 	.word	0x40023c00

08001284 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800128c:	4b12      	ldr	r3, [pc, #72]	; (80012d8 <HAL_InitTick+0x54>)
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	4b12      	ldr	r3, [pc, #72]	; (80012dc <HAL_InitTick+0x58>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	4619      	mov	r1, r3
 8001296:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800129a:	fbb3 f3f1 	udiv	r3, r3, r1
 800129e:	fbb2 f3f3 	udiv	r3, r2, r3
 80012a2:	4618      	mov	r0, r3
 80012a4:	f000 fd33 	bl	8001d0e <HAL_SYSTICK_Config>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e00e      	b.n	80012d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2b0f      	cmp	r3, #15
 80012b6:	d80a      	bhi.n	80012ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012b8:	2200      	movs	r2, #0
 80012ba:	6879      	ldr	r1, [r7, #4]
 80012bc:	f04f 30ff 	mov.w	r0, #4294967295
 80012c0:	f000 fcfb 	bl	8001cba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012c4:	4a06      	ldr	r2, [pc, #24]	; (80012e0 <HAL_InitTick+0x5c>)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012ca:	2300      	movs	r3, #0
 80012cc:	e000      	b.n	80012d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	2000003c 	.word	0x2000003c
 80012dc:	20000044 	.word	0x20000044
 80012e0:	20000040 	.word	0x20000040

080012e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012e8:	4b06      	ldr	r3, [pc, #24]	; (8001304 <HAL_IncTick+0x20>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	461a      	mov	r2, r3
 80012ee:	4b06      	ldr	r3, [pc, #24]	; (8001308 <HAL_IncTick+0x24>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4413      	add	r3, r2
 80012f4:	4a04      	ldr	r2, [pc, #16]	; (8001308 <HAL_IncTick+0x24>)
 80012f6:	6013      	str	r3, [r2, #0]
}
 80012f8:	bf00      	nop
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	20000044 	.word	0x20000044
 8001308:	20000180 	.word	0x20000180

0800130c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  return uwTick;
 8001310:	4b03      	ldr	r3, [pc, #12]	; (8001320 <HAL_GetTick+0x14>)
 8001312:	681b      	ldr	r3, [r3, #0]
}
 8001314:	4618      	mov	r0, r3
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	20000180 	.word	0x20000180

08001324 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800132c:	f7ff ffee 	bl	800130c <HAL_GetTick>
 8001330:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800133c:	d005      	beq.n	800134a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800133e:	4b0a      	ldr	r3, [pc, #40]	; (8001368 <HAL_Delay+0x44>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	461a      	mov	r2, r3
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	4413      	add	r3, r2
 8001348:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800134a:	bf00      	nop
 800134c:	f7ff ffde 	bl	800130c <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	68fa      	ldr	r2, [r7, #12]
 8001358:	429a      	cmp	r2, r3
 800135a:	d8f7      	bhi.n	800134c <HAL_Delay+0x28>
  {
  }
}
 800135c:	bf00      	nop
 800135e:	bf00      	nop
 8001360:	3710      	adds	r7, #16
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	20000044 	.word	0x20000044

0800136c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001374:	2300      	movs	r3, #0
 8001376:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d101      	bne.n	8001382 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e033      	b.n	80013ea <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001386:	2b00      	cmp	r3, #0
 8001388:	d109      	bne.n	800139e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f7ff fe46 	bl	800101c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2200      	movs	r2, #0
 8001394:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2200      	movs	r2, #0
 800139a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a2:	f003 0310 	and.w	r3, r3, #16
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d118      	bne.n	80013dc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80013b2:	f023 0302 	bic.w	r3, r3, #2
 80013b6:	f043 0202 	orr.w	r2, r3, #2
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f000 faa4 	bl	800190c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2200      	movs	r2, #0
 80013c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ce:	f023 0303 	bic.w	r3, r3, #3
 80013d2:	f043 0201 	orr.w	r2, r3, #1
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	641a      	str	r2, [r3, #64]	; 0x40
 80013da:	e001      	b.n	80013e0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2200      	movs	r2, #0
 80013e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80013e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3710      	adds	r7, #16
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
	...

080013f4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80013fc:	2300      	movs	r3, #0
 80013fe:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001406:	2b01      	cmp	r3, #1
 8001408:	d101      	bne.n	800140e <HAL_ADC_Start+0x1a>
 800140a:	2302      	movs	r3, #2
 800140c:	e0b2      	b.n	8001574 <HAL_ADC_Start+0x180>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2201      	movs	r2, #1
 8001412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	f003 0301 	and.w	r3, r3, #1
 8001420:	2b01      	cmp	r3, #1
 8001422:	d018      	beq.n	8001456 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	689a      	ldr	r2, [r3, #8]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f042 0201 	orr.w	r2, r2, #1
 8001432:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001434:	4b52      	ldr	r3, [pc, #328]	; (8001580 <HAL_ADC_Start+0x18c>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a52      	ldr	r2, [pc, #328]	; (8001584 <HAL_ADC_Start+0x190>)
 800143a:	fba2 2303 	umull	r2, r3, r2, r3
 800143e:	0c9a      	lsrs	r2, r3, #18
 8001440:	4613      	mov	r3, r2
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	4413      	add	r3, r2
 8001446:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001448:	e002      	b.n	8001450 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	3b01      	subs	r3, #1
 800144e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d1f9      	bne.n	800144a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	f003 0301 	and.w	r3, r3, #1
 8001460:	2b01      	cmp	r3, #1
 8001462:	d17a      	bne.n	800155a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001468:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800146c:	f023 0301 	bic.w	r3, r3, #1
 8001470:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001482:	2b00      	cmp	r3, #0
 8001484:	d007      	beq.n	8001496 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800148e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800149e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014a2:	d106      	bne.n	80014b2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a8:	f023 0206 	bic.w	r2, r3, #6
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	645a      	str	r2, [r3, #68]	; 0x44
 80014b0:	e002      	b.n	80014b8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2200      	movs	r2, #0
 80014b6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2200      	movs	r2, #0
 80014bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014c0:	4b31      	ldr	r3, [pc, #196]	; (8001588 <HAL_ADC_Start+0x194>)
 80014c2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80014cc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f003 031f 	and.w	r3, r3, #31
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d12a      	bne.n	8001530 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a2b      	ldr	r2, [pc, #172]	; (800158c <HAL_ADC_Start+0x198>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d015      	beq.n	8001510 <HAL_ADC_Start+0x11c>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a29      	ldr	r2, [pc, #164]	; (8001590 <HAL_ADC_Start+0x19c>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d105      	bne.n	80014fa <HAL_ADC_Start+0x106>
 80014ee:	4b26      	ldr	r3, [pc, #152]	; (8001588 <HAL_ADC_Start+0x194>)
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f003 031f 	and.w	r3, r3, #31
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d00a      	beq.n	8001510 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a25      	ldr	r2, [pc, #148]	; (8001594 <HAL_ADC_Start+0x1a0>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d136      	bne.n	8001572 <HAL_ADC_Start+0x17e>
 8001504:	4b20      	ldr	r3, [pc, #128]	; (8001588 <HAL_ADC_Start+0x194>)
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f003 0310 	and.w	r3, r3, #16
 800150c:	2b00      	cmp	r3, #0
 800150e:	d130      	bne.n	8001572 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d129      	bne.n	8001572 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	689a      	ldr	r2, [r3, #8]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800152c:	609a      	str	r2, [r3, #8]
 800152e:	e020      	b.n	8001572 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a15      	ldr	r2, [pc, #84]	; (800158c <HAL_ADC_Start+0x198>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d11b      	bne.n	8001572 <HAL_ADC_Start+0x17e>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001544:	2b00      	cmp	r3, #0
 8001546:	d114      	bne.n	8001572 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	689a      	ldr	r2, [r3, #8]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001556:	609a      	str	r2, [r3, #8]
 8001558:	e00b      	b.n	8001572 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155e:	f043 0210 	orr.w	r2, r3, #16
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156a:	f043 0201 	orr.w	r2, r3, #1
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001572:	2300      	movs	r3, #0
}
 8001574:	4618      	mov	r0, r3
 8001576:	3714      	adds	r7, #20
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	2000003c 	.word	0x2000003c
 8001584:	431bde83 	.word	0x431bde83
 8001588:	40012300 	.word	0x40012300
 800158c:	40012000 	.word	0x40012000
 8001590:	40012100 	.word	0x40012100
 8001594:	40012200 	.word	0x40012200

08001598 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80015a2:	2300      	movs	r3, #0
 80015a4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015b4:	d113      	bne.n	80015de <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80015c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015c4:	d10b      	bne.n	80015de <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ca:	f043 0220 	orr.w	r2, r3, #32
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2200      	movs	r2, #0
 80015d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e063      	b.n	80016a6 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80015de:	f7ff fe95 	bl	800130c <HAL_GetTick>
 80015e2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80015e4:	e021      	b.n	800162a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015ec:	d01d      	beq.n	800162a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d007      	beq.n	8001604 <HAL_ADC_PollForConversion+0x6c>
 80015f4:	f7ff fe8a 	bl	800130c <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	683a      	ldr	r2, [r7, #0]
 8001600:	429a      	cmp	r2, r3
 8001602:	d212      	bcs.n	800162a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	2b02      	cmp	r3, #2
 8001610:	d00b      	beq.n	800162a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001616:	f043 0204 	orr.w	r2, r3, #4
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2200      	movs	r2, #0
 8001622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e03d      	b.n	80016a6 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 0302 	and.w	r3, r3, #2
 8001634:	2b02      	cmp	r3, #2
 8001636:	d1d6      	bne.n	80015e6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f06f 0212 	mvn.w	r2, #18
 8001640:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001646:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d123      	bne.n	80016a4 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001660:	2b00      	cmp	r3, #0
 8001662:	d11f      	bne.n	80016a4 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800166a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800166e:	2b00      	cmp	r3, #0
 8001670:	d006      	beq.n	8001680 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800167c:	2b00      	cmp	r3, #0
 800167e:	d111      	bne.n	80016a4 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001684:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001690:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001694:	2b00      	cmp	r3, #0
 8001696:	d105      	bne.n	80016a4 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169c:	f043 0201 	orr.w	r2, r3, #1
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3710      	adds	r7, #16
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80016ae:	b480      	push	{r7}
 80016b0:	b083      	sub	sp, #12
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80016bc:	4618      	mov	r0, r3
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80016d2:	2300      	movs	r3, #0
 80016d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d101      	bne.n	80016e4 <HAL_ADC_ConfigChannel+0x1c>
 80016e0:	2302      	movs	r3, #2
 80016e2:	e105      	b.n	80018f0 <HAL_ADC_ConfigChannel+0x228>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2201      	movs	r2, #1
 80016e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2b09      	cmp	r3, #9
 80016f2:	d925      	bls.n	8001740 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	68d9      	ldr	r1, [r3, #12]
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	b29b      	uxth	r3, r3
 8001700:	461a      	mov	r2, r3
 8001702:	4613      	mov	r3, r2
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	4413      	add	r3, r2
 8001708:	3b1e      	subs	r3, #30
 800170a:	2207      	movs	r2, #7
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	43da      	mvns	r2, r3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	400a      	ands	r2, r1
 8001718:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	68d9      	ldr	r1, [r3, #12]
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	689a      	ldr	r2, [r3, #8]
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	b29b      	uxth	r3, r3
 800172a:	4618      	mov	r0, r3
 800172c:	4603      	mov	r3, r0
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	4403      	add	r3, r0
 8001732:	3b1e      	subs	r3, #30
 8001734:	409a      	lsls	r2, r3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	430a      	orrs	r2, r1
 800173c:	60da      	str	r2, [r3, #12]
 800173e:	e022      	b.n	8001786 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	6919      	ldr	r1, [r3, #16]
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	b29b      	uxth	r3, r3
 800174c:	461a      	mov	r2, r3
 800174e:	4613      	mov	r3, r2
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	4413      	add	r3, r2
 8001754:	2207      	movs	r2, #7
 8001756:	fa02 f303 	lsl.w	r3, r2, r3
 800175a:	43da      	mvns	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	400a      	ands	r2, r1
 8001762:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	6919      	ldr	r1, [r3, #16]
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	689a      	ldr	r2, [r3, #8]
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	b29b      	uxth	r3, r3
 8001774:	4618      	mov	r0, r3
 8001776:	4603      	mov	r3, r0
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	4403      	add	r3, r0
 800177c:	409a      	lsls	r2, r3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	430a      	orrs	r2, r1
 8001784:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	2b06      	cmp	r3, #6
 800178c:	d824      	bhi.n	80017d8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685a      	ldr	r2, [r3, #4]
 8001798:	4613      	mov	r3, r2
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	4413      	add	r3, r2
 800179e:	3b05      	subs	r3, #5
 80017a0:	221f      	movs	r2, #31
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	43da      	mvns	r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	400a      	ands	r2, r1
 80017ae:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	b29b      	uxth	r3, r3
 80017bc:	4618      	mov	r0, r3
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685a      	ldr	r2, [r3, #4]
 80017c2:	4613      	mov	r3, r2
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	4413      	add	r3, r2
 80017c8:	3b05      	subs	r3, #5
 80017ca:	fa00 f203 	lsl.w	r2, r0, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	430a      	orrs	r2, r1
 80017d4:	635a      	str	r2, [r3, #52]	; 0x34
 80017d6:	e04c      	b.n	8001872 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	2b0c      	cmp	r3, #12
 80017de:	d824      	bhi.n	800182a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685a      	ldr	r2, [r3, #4]
 80017ea:	4613      	mov	r3, r2
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	4413      	add	r3, r2
 80017f0:	3b23      	subs	r3, #35	; 0x23
 80017f2:	221f      	movs	r2, #31
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	43da      	mvns	r2, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	400a      	ands	r2, r1
 8001800:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	b29b      	uxth	r3, r3
 800180e:	4618      	mov	r0, r3
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685a      	ldr	r2, [r3, #4]
 8001814:	4613      	mov	r3, r2
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	4413      	add	r3, r2
 800181a:	3b23      	subs	r3, #35	; 0x23
 800181c:	fa00 f203 	lsl.w	r2, r0, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	430a      	orrs	r2, r1
 8001826:	631a      	str	r2, [r3, #48]	; 0x30
 8001828:	e023      	b.n	8001872 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685a      	ldr	r2, [r3, #4]
 8001834:	4613      	mov	r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	4413      	add	r3, r2
 800183a:	3b41      	subs	r3, #65	; 0x41
 800183c:	221f      	movs	r2, #31
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	43da      	mvns	r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	400a      	ands	r2, r1
 800184a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	b29b      	uxth	r3, r3
 8001858:	4618      	mov	r0, r3
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685a      	ldr	r2, [r3, #4]
 800185e:	4613      	mov	r3, r2
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	4413      	add	r3, r2
 8001864:	3b41      	subs	r3, #65	; 0x41
 8001866:	fa00 f203 	lsl.w	r2, r0, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	430a      	orrs	r2, r1
 8001870:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001872:	4b22      	ldr	r3, [pc, #136]	; (80018fc <HAL_ADC_ConfigChannel+0x234>)
 8001874:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a21      	ldr	r2, [pc, #132]	; (8001900 <HAL_ADC_ConfigChannel+0x238>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d109      	bne.n	8001894 <HAL_ADC_ConfigChannel+0x1cc>
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2b12      	cmp	r3, #18
 8001886:	d105      	bne.n	8001894 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a19      	ldr	r2, [pc, #100]	; (8001900 <HAL_ADC_ConfigChannel+0x238>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d123      	bne.n	80018e6 <HAL_ADC_ConfigChannel+0x21e>
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2b10      	cmp	r3, #16
 80018a4:	d003      	beq.n	80018ae <HAL_ADC_ConfigChannel+0x1e6>
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	2b11      	cmp	r3, #17
 80018ac:	d11b      	bne.n	80018e6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2b10      	cmp	r3, #16
 80018c0:	d111      	bne.n	80018e6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80018c2:	4b10      	ldr	r3, [pc, #64]	; (8001904 <HAL_ADC_ConfigChannel+0x23c>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a10      	ldr	r2, [pc, #64]	; (8001908 <HAL_ADC_ConfigChannel+0x240>)
 80018c8:	fba2 2303 	umull	r2, r3, r2, r3
 80018cc:	0c9a      	lsrs	r2, r3, #18
 80018ce:	4613      	mov	r3, r2
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	4413      	add	r3, r2
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80018d8:	e002      	b.n	80018e0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	3b01      	subs	r3, #1
 80018de:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d1f9      	bne.n	80018da <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2200      	movs	r2, #0
 80018ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80018ee:	2300      	movs	r3, #0
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3714      	adds	r7, #20
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr
 80018fc:	40012300 	.word	0x40012300
 8001900:	40012000 	.word	0x40012000
 8001904:	2000003c 	.word	0x2000003c
 8001908:	431bde83 	.word	0x431bde83

0800190c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800190c:	b480      	push	{r7}
 800190e:	b085      	sub	sp, #20
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001914:	4b79      	ldr	r3, [pc, #484]	; (8001afc <ADC_Init+0x1f0>)
 8001916:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	685a      	ldr	r2, [r3, #4]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	431a      	orrs	r2, r3
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	685a      	ldr	r2, [r3, #4]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001940:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	6859      	ldr	r1, [r3, #4]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	691b      	ldr	r3, [r3, #16]
 800194c:	021a      	lsls	r2, r3, #8
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	430a      	orrs	r2, r1
 8001954:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	685a      	ldr	r2, [r3, #4]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001964:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	6859      	ldr	r1, [r3, #4]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	689a      	ldr	r2, [r3, #8]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	430a      	orrs	r2, r1
 8001976:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	689a      	ldr	r2, [r3, #8]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001986:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	6899      	ldr	r1, [r3, #8]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	68da      	ldr	r2, [r3, #12]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	430a      	orrs	r2, r1
 8001998:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800199e:	4a58      	ldr	r2, [pc, #352]	; (8001b00 <ADC_Init+0x1f4>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d022      	beq.n	80019ea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	689a      	ldr	r2, [r3, #8]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80019b2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	6899      	ldr	r1, [r3, #8]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	430a      	orrs	r2, r1
 80019c4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	689a      	ldr	r2, [r3, #8]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80019d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	6899      	ldr	r1, [r3, #8]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	430a      	orrs	r2, r1
 80019e6:	609a      	str	r2, [r3, #8]
 80019e8:	e00f      	b.n	8001a0a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	689a      	ldr	r2, [r3, #8]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80019f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	689a      	ldr	r2, [r3, #8]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a08:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	689a      	ldr	r2, [r3, #8]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f022 0202 	bic.w	r2, r2, #2
 8001a18:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	6899      	ldr	r1, [r3, #8]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	7e1b      	ldrb	r3, [r3, #24]
 8001a24:	005a      	lsls	r2, r3, #1
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	430a      	orrs	r2, r1
 8001a2c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d01b      	beq.n	8001a70 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	685a      	ldr	r2, [r3, #4]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a46:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	685a      	ldr	r2, [r3, #4]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001a56:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	6859      	ldr	r1, [r3, #4]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a62:	3b01      	subs	r3, #1
 8001a64:	035a      	lsls	r2, r3, #13
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	430a      	orrs	r2, r1
 8001a6c:	605a      	str	r2, [r3, #4]
 8001a6e:	e007      	b.n	8001a80 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	685a      	ldr	r2, [r3, #4]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a7e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001a8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	69db      	ldr	r3, [r3, #28]
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	051a      	lsls	r2, r3, #20
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	430a      	orrs	r2, r1
 8001aa4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	689a      	ldr	r2, [r3, #8]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001ab4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	6899      	ldr	r1, [r3, #8]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ac2:	025a      	lsls	r2, r3, #9
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	430a      	orrs	r2, r1
 8001aca:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	689a      	ldr	r2, [r3, #8]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ada:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	6899      	ldr	r1, [r3, #8]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	695b      	ldr	r3, [r3, #20]
 8001ae6:	029a      	lsls	r2, r3, #10
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	430a      	orrs	r2, r1
 8001aee:	609a      	str	r2, [r3, #8]
}
 8001af0:	bf00      	nop
 8001af2:	3714      	adds	r7, #20
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	40012300 	.word	0x40012300
 8001b00:	0f000001 	.word	0x0f000001

08001b04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b085      	sub	sp, #20
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f003 0307 	and.w	r3, r3, #7
 8001b12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b14:	4b0c      	ldr	r3, [pc, #48]	; (8001b48 <__NVIC_SetPriorityGrouping+0x44>)
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b1a:	68ba      	ldr	r2, [r7, #8]
 8001b1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b20:	4013      	ands	r3, r2
 8001b22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b36:	4a04      	ldr	r2, [pc, #16]	; (8001b48 <__NVIC_SetPriorityGrouping+0x44>)
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	60d3      	str	r3, [r2, #12]
}
 8001b3c:	bf00      	nop
 8001b3e:	3714      	adds	r7, #20
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr
 8001b48:	e000ed00 	.word	0xe000ed00

08001b4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b50:	4b04      	ldr	r3, [pc, #16]	; (8001b64 <__NVIC_GetPriorityGrouping+0x18>)
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	0a1b      	lsrs	r3, r3, #8
 8001b56:	f003 0307 	and.w	r3, r3, #7
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	e000ed00 	.word	0xe000ed00

08001b68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	db0b      	blt.n	8001b92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b7a:	79fb      	ldrb	r3, [r7, #7]
 8001b7c:	f003 021f 	and.w	r2, r3, #31
 8001b80:	4907      	ldr	r1, [pc, #28]	; (8001ba0 <__NVIC_EnableIRQ+0x38>)
 8001b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b86:	095b      	lsrs	r3, r3, #5
 8001b88:	2001      	movs	r0, #1
 8001b8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b92:	bf00      	nop
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	e000e100 	.word	0xe000e100

08001ba4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	4603      	mov	r3, r0
 8001bac:	6039      	str	r1, [r7, #0]
 8001bae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	db0a      	blt.n	8001bce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	b2da      	uxtb	r2, r3
 8001bbc:	490c      	ldr	r1, [pc, #48]	; (8001bf0 <__NVIC_SetPriority+0x4c>)
 8001bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc2:	0112      	lsls	r2, r2, #4
 8001bc4:	b2d2      	uxtb	r2, r2
 8001bc6:	440b      	add	r3, r1
 8001bc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bcc:	e00a      	b.n	8001be4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	b2da      	uxtb	r2, r3
 8001bd2:	4908      	ldr	r1, [pc, #32]	; (8001bf4 <__NVIC_SetPriority+0x50>)
 8001bd4:	79fb      	ldrb	r3, [r7, #7]
 8001bd6:	f003 030f 	and.w	r3, r3, #15
 8001bda:	3b04      	subs	r3, #4
 8001bdc:	0112      	lsls	r2, r2, #4
 8001bde:	b2d2      	uxtb	r2, r2
 8001be0:	440b      	add	r3, r1
 8001be2:	761a      	strb	r2, [r3, #24]
}
 8001be4:	bf00      	nop
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr
 8001bf0:	e000e100 	.word	0xe000e100
 8001bf4:	e000ed00 	.word	0xe000ed00

08001bf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b089      	sub	sp, #36	; 0x24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	60f8      	str	r0, [r7, #12]
 8001c00:	60b9      	str	r1, [r7, #8]
 8001c02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	f003 0307 	and.w	r3, r3, #7
 8001c0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	f1c3 0307 	rsb	r3, r3, #7
 8001c12:	2b04      	cmp	r3, #4
 8001c14:	bf28      	it	cs
 8001c16:	2304      	movcs	r3, #4
 8001c18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	3304      	adds	r3, #4
 8001c1e:	2b06      	cmp	r3, #6
 8001c20:	d902      	bls.n	8001c28 <NVIC_EncodePriority+0x30>
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	3b03      	subs	r3, #3
 8001c26:	e000      	b.n	8001c2a <NVIC_EncodePriority+0x32>
 8001c28:	2300      	movs	r3, #0
 8001c2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	43da      	mvns	r2, r3
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	401a      	ands	r2, r3
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c40:	f04f 31ff 	mov.w	r1, #4294967295
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	fa01 f303 	lsl.w	r3, r1, r3
 8001c4a:	43d9      	mvns	r1, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c50:	4313      	orrs	r3, r2
         );
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3724      	adds	r7, #36	; 0x24
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
	...

08001c60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c70:	d301      	bcc.n	8001c76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c72:	2301      	movs	r3, #1
 8001c74:	e00f      	b.n	8001c96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c76:	4a0a      	ldr	r2, [pc, #40]	; (8001ca0 <SysTick_Config+0x40>)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c7e:	210f      	movs	r1, #15
 8001c80:	f04f 30ff 	mov.w	r0, #4294967295
 8001c84:	f7ff ff8e 	bl	8001ba4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c88:	4b05      	ldr	r3, [pc, #20]	; (8001ca0 <SysTick_Config+0x40>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c8e:	4b04      	ldr	r3, [pc, #16]	; (8001ca0 <SysTick_Config+0x40>)
 8001c90:	2207      	movs	r2, #7
 8001c92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	e000e010 	.word	0xe000e010

08001ca4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f7ff ff29 	bl	8001b04 <__NVIC_SetPriorityGrouping>
}
 8001cb2:	bf00      	nop
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b086      	sub	sp, #24
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	60b9      	str	r1, [r7, #8]
 8001cc4:	607a      	str	r2, [r7, #4]
 8001cc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ccc:	f7ff ff3e 	bl	8001b4c <__NVIC_GetPriorityGrouping>
 8001cd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	68b9      	ldr	r1, [r7, #8]
 8001cd6:	6978      	ldr	r0, [r7, #20]
 8001cd8:	f7ff ff8e 	bl	8001bf8 <NVIC_EncodePriority>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ce2:	4611      	mov	r1, r2
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7ff ff5d 	bl	8001ba4 <__NVIC_SetPriority>
}
 8001cea:	bf00      	nop
 8001cec:	3718      	adds	r7, #24
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b082      	sub	sp, #8
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff ff31 	bl	8001b68 <__NVIC_EnableIRQ>
}
 8001d06:	bf00      	nop
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b082      	sub	sp, #8
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f7ff ffa2 	bl	8001c60 <SysTick_Config>
 8001d1c:	4603      	mov	r3, r0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
	...

08001d28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b089      	sub	sp, #36	; 0x24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d32:	2300      	movs	r3, #0
 8001d34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d36:	2300      	movs	r3, #0
 8001d38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d3e:	2300      	movs	r3, #0
 8001d40:	61fb      	str	r3, [r7, #28]
 8001d42:	e16b      	b.n	800201c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d44:	2201      	movs	r2, #1
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	697a      	ldr	r2, [r7, #20]
 8001d54:	4013      	ands	r3, r2
 8001d56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d58:	693a      	ldr	r2, [r7, #16]
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	f040 815a 	bne.w	8002016 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f003 0303 	and.w	r3, r3, #3
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d005      	beq.n	8001d7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d130      	bne.n	8001ddc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	2203      	movs	r2, #3
 8001d86:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8a:	43db      	mvns	r3, r3
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	4013      	ands	r3, r2
 8001d90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	68da      	ldr	r2, [r3, #12]
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001db0:	2201      	movs	r2, #1
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	fa02 f303 	lsl.w	r3, r2, r3
 8001db8:	43db      	mvns	r3, r3
 8001dba:	69ba      	ldr	r2, [r7, #24]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	091b      	lsrs	r3, r3, #4
 8001dc6:	f003 0201 	and.w	r2, r3, #1
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f003 0303 	and.w	r3, r3, #3
 8001de4:	2b03      	cmp	r3, #3
 8001de6:	d017      	beq.n	8001e18 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	2203      	movs	r2, #3
 8001df4:	fa02 f303 	lsl.w	r3, r2, r3
 8001df8:	43db      	mvns	r3, r3
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	689a      	ldr	r2, [r3, #8]
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	005b      	lsls	r3, r3, #1
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f003 0303 	and.w	r3, r3, #3
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d123      	bne.n	8001e6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	08da      	lsrs	r2, r3, #3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	3208      	adds	r2, #8
 8001e2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	f003 0307 	and.w	r3, r3, #7
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	220f      	movs	r2, #15
 8001e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e40:	43db      	mvns	r3, r3
 8001e42:	69ba      	ldr	r2, [r7, #24]
 8001e44:	4013      	ands	r3, r2
 8001e46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	691a      	ldr	r2, [r3, #16]
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	f003 0307 	and.w	r3, r3, #7
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	fa02 f303 	lsl.w	r3, r2, r3
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	08da      	lsrs	r2, r3, #3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	3208      	adds	r2, #8
 8001e66:	69b9      	ldr	r1, [r7, #24]
 8001e68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	2203      	movs	r2, #3
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	43db      	mvns	r3, r3
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	4013      	ands	r3, r2
 8001e82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f003 0203 	and.w	r2, r3, #3
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	f000 80b4 	beq.w	8002016 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eae:	2300      	movs	r3, #0
 8001eb0:	60fb      	str	r3, [r7, #12]
 8001eb2:	4b60      	ldr	r3, [pc, #384]	; (8002034 <HAL_GPIO_Init+0x30c>)
 8001eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb6:	4a5f      	ldr	r2, [pc, #380]	; (8002034 <HAL_GPIO_Init+0x30c>)
 8001eb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ebc:	6453      	str	r3, [r2, #68]	; 0x44
 8001ebe:	4b5d      	ldr	r3, [pc, #372]	; (8002034 <HAL_GPIO_Init+0x30c>)
 8001ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ec6:	60fb      	str	r3, [r7, #12]
 8001ec8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001eca:	4a5b      	ldr	r2, [pc, #364]	; (8002038 <HAL_GPIO_Init+0x310>)
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	089b      	lsrs	r3, r3, #2
 8001ed0:	3302      	adds	r3, #2
 8001ed2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	f003 0303 	and.w	r3, r3, #3
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	220f      	movs	r2, #15
 8001ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee6:	43db      	mvns	r3, r3
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	4013      	ands	r3, r2
 8001eec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a52      	ldr	r2, [pc, #328]	; (800203c <HAL_GPIO_Init+0x314>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d02b      	beq.n	8001f4e <HAL_GPIO_Init+0x226>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a51      	ldr	r2, [pc, #324]	; (8002040 <HAL_GPIO_Init+0x318>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d025      	beq.n	8001f4a <HAL_GPIO_Init+0x222>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a50      	ldr	r2, [pc, #320]	; (8002044 <HAL_GPIO_Init+0x31c>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d01f      	beq.n	8001f46 <HAL_GPIO_Init+0x21e>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a4f      	ldr	r2, [pc, #316]	; (8002048 <HAL_GPIO_Init+0x320>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d019      	beq.n	8001f42 <HAL_GPIO_Init+0x21a>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a4e      	ldr	r2, [pc, #312]	; (800204c <HAL_GPIO_Init+0x324>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d013      	beq.n	8001f3e <HAL_GPIO_Init+0x216>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a4d      	ldr	r2, [pc, #308]	; (8002050 <HAL_GPIO_Init+0x328>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d00d      	beq.n	8001f3a <HAL_GPIO_Init+0x212>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a4c      	ldr	r2, [pc, #304]	; (8002054 <HAL_GPIO_Init+0x32c>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d007      	beq.n	8001f36 <HAL_GPIO_Init+0x20e>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a4b      	ldr	r2, [pc, #300]	; (8002058 <HAL_GPIO_Init+0x330>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d101      	bne.n	8001f32 <HAL_GPIO_Init+0x20a>
 8001f2e:	2307      	movs	r3, #7
 8001f30:	e00e      	b.n	8001f50 <HAL_GPIO_Init+0x228>
 8001f32:	2308      	movs	r3, #8
 8001f34:	e00c      	b.n	8001f50 <HAL_GPIO_Init+0x228>
 8001f36:	2306      	movs	r3, #6
 8001f38:	e00a      	b.n	8001f50 <HAL_GPIO_Init+0x228>
 8001f3a:	2305      	movs	r3, #5
 8001f3c:	e008      	b.n	8001f50 <HAL_GPIO_Init+0x228>
 8001f3e:	2304      	movs	r3, #4
 8001f40:	e006      	b.n	8001f50 <HAL_GPIO_Init+0x228>
 8001f42:	2303      	movs	r3, #3
 8001f44:	e004      	b.n	8001f50 <HAL_GPIO_Init+0x228>
 8001f46:	2302      	movs	r3, #2
 8001f48:	e002      	b.n	8001f50 <HAL_GPIO_Init+0x228>
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e000      	b.n	8001f50 <HAL_GPIO_Init+0x228>
 8001f4e:	2300      	movs	r3, #0
 8001f50:	69fa      	ldr	r2, [r7, #28]
 8001f52:	f002 0203 	and.w	r2, r2, #3
 8001f56:	0092      	lsls	r2, r2, #2
 8001f58:	4093      	lsls	r3, r2
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f60:	4935      	ldr	r1, [pc, #212]	; (8002038 <HAL_GPIO_Init+0x310>)
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	089b      	lsrs	r3, r3, #2
 8001f66:	3302      	adds	r3, #2
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f6e:	4b3b      	ldr	r3, [pc, #236]	; (800205c <HAL_GPIO_Init+0x334>)
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	43db      	mvns	r3, r3
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d003      	beq.n	8001f92 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001f8a:	69ba      	ldr	r2, [r7, #24]
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f92:	4a32      	ldr	r2, [pc, #200]	; (800205c <HAL_GPIO_Init+0x334>)
 8001f94:	69bb      	ldr	r3, [r7, #24]
 8001f96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f98:	4b30      	ldr	r3, [pc, #192]	; (800205c <HAL_GPIO_Init+0x334>)
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	43db      	mvns	r3, r3
 8001fa2:	69ba      	ldr	r2, [r7, #24]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d003      	beq.n	8001fbc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fbc:	4a27      	ldr	r2, [pc, #156]	; (800205c <HAL_GPIO_Init+0x334>)
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fc2:	4b26      	ldr	r3, [pc, #152]	; (800205c <HAL_GPIO_Init+0x334>)
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	43db      	mvns	r3, r3
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	4013      	ands	r3, r2
 8001fd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d003      	beq.n	8001fe6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fe6:	4a1d      	ldr	r2, [pc, #116]	; (800205c <HAL_GPIO_Init+0x334>)
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fec:	4b1b      	ldr	r3, [pc, #108]	; (800205c <HAL_GPIO_Init+0x334>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	43db      	mvns	r3, r3
 8001ff6:	69ba      	ldr	r2, [r7, #24]
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d003      	beq.n	8002010 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	4313      	orrs	r3, r2
 800200e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002010:	4a12      	ldr	r2, [pc, #72]	; (800205c <HAL_GPIO_Init+0x334>)
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	3301      	adds	r3, #1
 800201a:	61fb      	str	r3, [r7, #28]
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	2b0f      	cmp	r3, #15
 8002020:	f67f ae90 	bls.w	8001d44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002024:	bf00      	nop
 8002026:	bf00      	nop
 8002028:	3724      	adds	r7, #36	; 0x24
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	40023800 	.word	0x40023800
 8002038:	40013800 	.word	0x40013800
 800203c:	40020000 	.word	0x40020000
 8002040:	40020400 	.word	0x40020400
 8002044:	40020800 	.word	0x40020800
 8002048:	40020c00 	.word	0x40020c00
 800204c:	40021000 	.word	0x40021000
 8002050:	40021400 	.word	0x40021400
 8002054:	40021800 	.word	0x40021800
 8002058:	40021c00 	.word	0x40021c00
 800205c:	40013c00 	.word	0x40013c00

08002060 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	460b      	mov	r3, r1
 800206a:	807b      	strh	r3, [r7, #2]
 800206c:	4613      	mov	r3, r2
 800206e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002070:	787b      	ldrb	r3, [r7, #1]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d003      	beq.n	800207e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002076:	887a      	ldrh	r2, [r7, #2]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800207c:	e003      	b.n	8002086 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800207e:	887b      	ldrh	r3, [r7, #2]
 8002080:	041a      	lsls	r2, r3, #16
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	619a      	str	r2, [r3, #24]
}
 8002086:	bf00      	nop
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
	...

08002094 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	4603      	mov	r3, r0
 800209c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800209e:	4b08      	ldr	r3, [pc, #32]	; (80020c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020a0:	695a      	ldr	r2, [r3, #20]
 80020a2:	88fb      	ldrh	r3, [r7, #6]
 80020a4:	4013      	ands	r3, r2
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d006      	beq.n	80020b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80020aa:	4a05      	ldr	r2, [pc, #20]	; (80020c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020ac:	88fb      	ldrh	r3, [r7, #6]
 80020ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80020b0:	88fb      	ldrh	r3, [r7, #6]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7fe fe20 	bl	8000cf8 <HAL_GPIO_EXTI_Callback>
  }
}
 80020b8:	bf00      	nop
 80020ba:	3708      	adds	r7, #8
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	40013c00 	.word	0x40013c00

080020c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b086      	sub	sp, #24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d101      	bne.n	80020d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e267      	b.n	80025a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d075      	beq.n	80021ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020e2:	4b88      	ldr	r3, [pc, #544]	; (8002304 <HAL_RCC_OscConfig+0x240>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f003 030c 	and.w	r3, r3, #12
 80020ea:	2b04      	cmp	r3, #4
 80020ec:	d00c      	beq.n	8002108 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020ee:	4b85      	ldr	r3, [pc, #532]	; (8002304 <HAL_RCC_OscConfig+0x240>)
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020f6:	2b08      	cmp	r3, #8
 80020f8:	d112      	bne.n	8002120 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020fa:	4b82      	ldr	r3, [pc, #520]	; (8002304 <HAL_RCC_OscConfig+0x240>)
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002102:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002106:	d10b      	bne.n	8002120 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002108:	4b7e      	ldr	r3, [pc, #504]	; (8002304 <HAL_RCC_OscConfig+0x240>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d05b      	beq.n	80021cc <HAL_RCC_OscConfig+0x108>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d157      	bne.n	80021cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e242      	b.n	80025a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002128:	d106      	bne.n	8002138 <HAL_RCC_OscConfig+0x74>
 800212a:	4b76      	ldr	r3, [pc, #472]	; (8002304 <HAL_RCC_OscConfig+0x240>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a75      	ldr	r2, [pc, #468]	; (8002304 <HAL_RCC_OscConfig+0x240>)
 8002130:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002134:	6013      	str	r3, [r2, #0]
 8002136:	e01d      	b.n	8002174 <HAL_RCC_OscConfig+0xb0>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002140:	d10c      	bne.n	800215c <HAL_RCC_OscConfig+0x98>
 8002142:	4b70      	ldr	r3, [pc, #448]	; (8002304 <HAL_RCC_OscConfig+0x240>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a6f      	ldr	r2, [pc, #444]	; (8002304 <HAL_RCC_OscConfig+0x240>)
 8002148:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800214c:	6013      	str	r3, [r2, #0]
 800214e:	4b6d      	ldr	r3, [pc, #436]	; (8002304 <HAL_RCC_OscConfig+0x240>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a6c      	ldr	r2, [pc, #432]	; (8002304 <HAL_RCC_OscConfig+0x240>)
 8002154:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002158:	6013      	str	r3, [r2, #0]
 800215a:	e00b      	b.n	8002174 <HAL_RCC_OscConfig+0xb0>
 800215c:	4b69      	ldr	r3, [pc, #420]	; (8002304 <HAL_RCC_OscConfig+0x240>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a68      	ldr	r2, [pc, #416]	; (8002304 <HAL_RCC_OscConfig+0x240>)
 8002162:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002166:	6013      	str	r3, [r2, #0]
 8002168:	4b66      	ldr	r3, [pc, #408]	; (8002304 <HAL_RCC_OscConfig+0x240>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a65      	ldr	r2, [pc, #404]	; (8002304 <HAL_RCC_OscConfig+0x240>)
 800216e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002172:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d013      	beq.n	80021a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800217c:	f7ff f8c6 	bl	800130c <HAL_GetTick>
 8002180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002182:	e008      	b.n	8002196 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002184:	f7ff f8c2 	bl	800130c <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	2b64      	cmp	r3, #100	; 0x64
 8002190:	d901      	bls.n	8002196 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e207      	b.n	80025a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002196:	4b5b      	ldr	r3, [pc, #364]	; (8002304 <HAL_RCC_OscConfig+0x240>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d0f0      	beq.n	8002184 <HAL_RCC_OscConfig+0xc0>
 80021a2:	e014      	b.n	80021ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a4:	f7ff f8b2 	bl	800130c <HAL_GetTick>
 80021a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021aa:	e008      	b.n	80021be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021ac:	f7ff f8ae 	bl	800130c <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	2b64      	cmp	r3, #100	; 0x64
 80021b8:	d901      	bls.n	80021be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e1f3      	b.n	80025a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021be:	4b51      	ldr	r3, [pc, #324]	; (8002304 <HAL_RCC_OscConfig+0x240>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d1f0      	bne.n	80021ac <HAL_RCC_OscConfig+0xe8>
 80021ca:	e000      	b.n	80021ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d063      	beq.n	80022a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021da:	4b4a      	ldr	r3, [pc, #296]	; (8002304 <HAL_RCC_OscConfig+0x240>)
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f003 030c 	and.w	r3, r3, #12
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d00b      	beq.n	80021fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021e6:	4b47      	ldr	r3, [pc, #284]	; (8002304 <HAL_RCC_OscConfig+0x240>)
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021ee:	2b08      	cmp	r3, #8
 80021f0:	d11c      	bne.n	800222c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021f2:	4b44      	ldr	r3, [pc, #272]	; (8002304 <HAL_RCC_OscConfig+0x240>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d116      	bne.n	800222c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021fe:	4b41      	ldr	r3, [pc, #260]	; (8002304 <HAL_RCC_OscConfig+0x240>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d005      	beq.n	8002216 <HAL_RCC_OscConfig+0x152>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d001      	beq.n	8002216 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e1c7      	b.n	80025a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002216:	4b3b      	ldr	r3, [pc, #236]	; (8002304 <HAL_RCC_OscConfig+0x240>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	691b      	ldr	r3, [r3, #16]
 8002222:	00db      	lsls	r3, r3, #3
 8002224:	4937      	ldr	r1, [pc, #220]	; (8002304 <HAL_RCC_OscConfig+0x240>)
 8002226:	4313      	orrs	r3, r2
 8002228:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800222a:	e03a      	b.n	80022a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d020      	beq.n	8002276 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002234:	4b34      	ldr	r3, [pc, #208]	; (8002308 <HAL_RCC_OscConfig+0x244>)
 8002236:	2201      	movs	r2, #1
 8002238:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800223a:	f7ff f867 	bl	800130c <HAL_GetTick>
 800223e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002240:	e008      	b.n	8002254 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002242:	f7ff f863 	bl	800130c <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	2b02      	cmp	r3, #2
 800224e:	d901      	bls.n	8002254 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e1a8      	b.n	80025a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002254:	4b2b      	ldr	r3, [pc, #172]	; (8002304 <HAL_RCC_OscConfig+0x240>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0302 	and.w	r3, r3, #2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d0f0      	beq.n	8002242 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002260:	4b28      	ldr	r3, [pc, #160]	; (8002304 <HAL_RCC_OscConfig+0x240>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	691b      	ldr	r3, [r3, #16]
 800226c:	00db      	lsls	r3, r3, #3
 800226e:	4925      	ldr	r1, [pc, #148]	; (8002304 <HAL_RCC_OscConfig+0x240>)
 8002270:	4313      	orrs	r3, r2
 8002272:	600b      	str	r3, [r1, #0]
 8002274:	e015      	b.n	80022a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002276:	4b24      	ldr	r3, [pc, #144]	; (8002308 <HAL_RCC_OscConfig+0x244>)
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800227c:	f7ff f846 	bl	800130c <HAL_GetTick>
 8002280:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002282:	e008      	b.n	8002296 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002284:	f7ff f842 	bl	800130c <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b02      	cmp	r3, #2
 8002290:	d901      	bls.n	8002296 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e187      	b.n	80025a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002296:	4b1b      	ldr	r3, [pc, #108]	; (8002304 <HAL_RCC_OscConfig+0x240>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d1f0      	bne.n	8002284 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0308 	and.w	r3, r3, #8
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d036      	beq.n	800231c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	695b      	ldr	r3, [r3, #20]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d016      	beq.n	80022e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022b6:	4b15      	ldr	r3, [pc, #84]	; (800230c <HAL_RCC_OscConfig+0x248>)
 80022b8:	2201      	movs	r2, #1
 80022ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022bc:	f7ff f826 	bl	800130c <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022c4:	f7ff f822 	bl	800130c <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e167      	b.n	80025a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022d6:	4b0b      	ldr	r3, [pc, #44]	; (8002304 <HAL_RCC_OscConfig+0x240>)
 80022d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d0f0      	beq.n	80022c4 <HAL_RCC_OscConfig+0x200>
 80022e2:	e01b      	b.n	800231c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022e4:	4b09      	ldr	r3, [pc, #36]	; (800230c <HAL_RCC_OscConfig+0x248>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ea:	f7ff f80f 	bl	800130c <HAL_GetTick>
 80022ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022f0:	e00e      	b.n	8002310 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022f2:	f7ff f80b 	bl	800130c <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d907      	bls.n	8002310 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	e150      	b.n	80025a6 <HAL_RCC_OscConfig+0x4e2>
 8002304:	40023800 	.word	0x40023800
 8002308:	42470000 	.word	0x42470000
 800230c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002310:	4b88      	ldr	r3, [pc, #544]	; (8002534 <HAL_RCC_OscConfig+0x470>)
 8002312:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002314:	f003 0302 	and.w	r3, r3, #2
 8002318:	2b00      	cmp	r3, #0
 800231a:	d1ea      	bne.n	80022f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0304 	and.w	r3, r3, #4
 8002324:	2b00      	cmp	r3, #0
 8002326:	f000 8097 	beq.w	8002458 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800232a:	2300      	movs	r3, #0
 800232c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800232e:	4b81      	ldr	r3, [pc, #516]	; (8002534 <HAL_RCC_OscConfig+0x470>)
 8002330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d10f      	bne.n	800235a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800233a:	2300      	movs	r3, #0
 800233c:	60bb      	str	r3, [r7, #8]
 800233e:	4b7d      	ldr	r3, [pc, #500]	; (8002534 <HAL_RCC_OscConfig+0x470>)
 8002340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002342:	4a7c      	ldr	r2, [pc, #496]	; (8002534 <HAL_RCC_OscConfig+0x470>)
 8002344:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002348:	6413      	str	r3, [r2, #64]	; 0x40
 800234a:	4b7a      	ldr	r3, [pc, #488]	; (8002534 <HAL_RCC_OscConfig+0x470>)
 800234c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002352:	60bb      	str	r3, [r7, #8]
 8002354:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002356:	2301      	movs	r3, #1
 8002358:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800235a:	4b77      	ldr	r3, [pc, #476]	; (8002538 <HAL_RCC_OscConfig+0x474>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002362:	2b00      	cmp	r3, #0
 8002364:	d118      	bne.n	8002398 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002366:	4b74      	ldr	r3, [pc, #464]	; (8002538 <HAL_RCC_OscConfig+0x474>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a73      	ldr	r2, [pc, #460]	; (8002538 <HAL_RCC_OscConfig+0x474>)
 800236c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002370:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002372:	f7fe ffcb 	bl	800130c <HAL_GetTick>
 8002376:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002378:	e008      	b.n	800238c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800237a:	f7fe ffc7 	bl	800130c <HAL_GetTick>
 800237e:	4602      	mov	r2, r0
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	2b02      	cmp	r3, #2
 8002386:	d901      	bls.n	800238c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	e10c      	b.n	80025a6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800238c:	4b6a      	ldr	r3, [pc, #424]	; (8002538 <HAL_RCC_OscConfig+0x474>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002394:	2b00      	cmp	r3, #0
 8002396:	d0f0      	beq.n	800237a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d106      	bne.n	80023ae <HAL_RCC_OscConfig+0x2ea>
 80023a0:	4b64      	ldr	r3, [pc, #400]	; (8002534 <HAL_RCC_OscConfig+0x470>)
 80023a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023a4:	4a63      	ldr	r2, [pc, #396]	; (8002534 <HAL_RCC_OscConfig+0x470>)
 80023a6:	f043 0301 	orr.w	r3, r3, #1
 80023aa:	6713      	str	r3, [r2, #112]	; 0x70
 80023ac:	e01c      	b.n	80023e8 <HAL_RCC_OscConfig+0x324>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	2b05      	cmp	r3, #5
 80023b4:	d10c      	bne.n	80023d0 <HAL_RCC_OscConfig+0x30c>
 80023b6:	4b5f      	ldr	r3, [pc, #380]	; (8002534 <HAL_RCC_OscConfig+0x470>)
 80023b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ba:	4a5e      	ldr	r2, [pc, #376]	; (8002534 <HAL_RCC_OscConfig+0x470>)
 80023bc:	f043 0304 	orr.w	r3, r3, #4
 80023c0:	6713      	str	r3, [r2, #112]	; 0x70
 80023c2:	4b5c      	ldr	r3, [pc, #368]	; (8002534 <HAL_RCC_OscConfig+0x470>)
 80023c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023c6:	4a5b      	ldr	r2, [pc, #364]	; (8002534 <HAL_RCC_OscConfig+0x470>)
 80023c8:	f043 0301 	orr.w	r3, r3, #1
 80023cc:	6713      	str	r3, [r2, #112]	; 0x70
 80023ce:	e00b      	b.n	80023e8 <HAL_RCC_OscConfig+0x324>
 80023d0:	4b58      	ldr	r3, [pc, #352]	; (8002534 <HAL_RCC_OscConfig+0x470>)
 80023d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d4:	4a57      	ldr	r2, [pc, #348]	; (8002534 <HAL_RCC_OscConfig+0x470>)
 80023d6:	f023 0301 	bic.w	r3, r3, #1
 80023da:	6713      	str	r3, [r2, #112]	; 0x70
 80023dc:	4b55      	ldr	r3, [pc, #340]	; (8002534 <HAL_RCC_OscConfig+0x470>)
 80023de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e0:	4a54      	ldr	r2, [pc, #336]	; (8002534 <HAL_RCC_OscConfig+0x470>)
 80023e2:	f023 0304 	bic.w	r3, r3, #4
 80023e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d015      	beq.n	800241c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023f0:	f7fe ff8c 	bl	800130c <HAL_GetTick>
 80023f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023f6:	e00a      	b.n	800240e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023f8:	f7fe ff88 	bl	800130c <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	f241 3288 	movw	r2, #5000	; 0x1388
 8002406:	4293      	cmp	r3, r2
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e0cb      	b.n	80025a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800240e:	4b49      	ldr	r3, [pc, #292]	; (8002534 <HAL_RCC_OscConfig+0x470>)
 8002410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002412:	f003 0302 	and.w	r3, r3, #2
 8002416:	2b00      	cmp	r3, #0
 8002418:	d0ee      	beq.n	80023f8 <HAL_RCC_OscConfig+0x334>
 800241a:	e014      	b.n	8002446 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800241c:	f7fe ff76 	bl	800130c <HAL_GetTick>
 8002420:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002422:	e00a      	b.n	800243a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002424:	f7fe ff72 	bl	800130c <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002432:	4293      	cmp	r3, r2
 8002434:	d901      	bls.n	800243a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e0b5      	b.n	80025a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800243a:	4b3e      	ldr	r3, [pc, #248]	; (8002534 <HAL_RCC_OscConfig+0x470>)
 800243c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	2b00      	cmp	r3, #0
 8002444:	d1ee      	bne.n	8002424 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002446:	7dfb      	ldrb	r3, [r7, #23]
 8002448:	2b01      	cmp	r3, #1
 800244a:	d105      	bne.n	8002458 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800244c:	4b39      	ldr	r3, [pc, #228]	; (8002534 <HAL_RCC_OscConfig+0x470>)
 800244e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002450:	4a38      	ldr	r2, [pc, #224]	; (8002534 <HAL_RCC_OscConfig+0x470>)
 8002452:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002456:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	699b      	ldr	r3, [r3, #24]
 800245c:	2b00      	cmp	r3, #0
 800245e:	f000 80a1 	beq.w	80025a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002462:	4b34      	ldr	r3, [pc, #208]	; (8002534 <HAL_RCC_OscConfig+0x470>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f003 030c 	and.w	r3, r3, #12
 800246a:	2b08      	cmp	r3, #8
 800246c:	d05c      	beq.n	8002528 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	699b      	ldr	r3, [r3, #24]
 8002472:	2b02      	cmp	r3, #2
 8002474:	d141      	bne.n	80024fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002476:	4b31      	ldr	r3, [pc, #196]	; (800253c <HAL_RCC_OscConfig+0x478>)
 8002478:	2200      	movs	r2, #0
 800247a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800247c:	f7fe ff46 	bl	800130c <HAL_GetTick>
 8002480:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002482:	e008      	b.n	8002496 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002484:	f7fe ff42 	bl	800130c <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	2b02      	cmp	r3, #2
 8002490:	d901      	bls.n	8002496 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e087      	b.n	80025a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002496:	4b27      	ldr	r3, [pc, #156]	; (8002534 <HAL_RCC_OscConfig+0x470>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d1f0      	bne.n	8002484 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	69da      	ldr	r2, [r3, #28]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a1b      	ldr	r3, [r3, #32]
 80024aa:	431a      	orrs	r2, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b0:	019b      	lsls	r3, r3, #6
 80024b2:	431a      	orrs	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b8:	085b      	lsrs	r3, r3, #1
 80024ba:	3b01      	subs	r3, #1
 80024bc:	041b      	lsls	r3, r3, #16
 80024be:	431a      	orrs	r2, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c4:	061b      	lsls	r3, r3, #24
 80024c6:	491b      	ldr	r1, [pc, #108]	; (8002534 <HAL_RCC_OscConfig+0x470>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024cc:	4b1b      	ldr	r3, [pc, #108]	; (800253c <HAL_RCC_OscConfig+0x478>)
 80024ce:	2201      	movs	r2, #1
 80024d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d2:	f7fe ff1b 	bl	800130c <HAL_GetTick>
 80024d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024d8:	e008      	b.n	80024ec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024da:	f7fe ff17 	bl	800130c <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d901      	bls.n	80024ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e05c      	b.n	80025a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024ec:	4b11      	ldr	r3, [pc, #68]	; (8002534 <HAL_RCC_OscConfig+0x470>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d0f0      	beq.n	80024da <HAL_RCC_OscConfig+0x416>
 80024f8:	e054      	b.n	80025a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024fa:	4b10      	ldr	r3, [pc, #64]	; (800253c <HAL_RCC_OscConfig+0x478>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002500:	f7fe ff04 	bl	800130c <HAL_GetTick>
 8002504:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002506:	e008      	b.n	800251a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002508:	f7fe ff00 	bl	800130c <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b02      	cmp	r3, #2
 8002514:	d901      	bls.n	800251a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e045      	b.n	80025a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800251a:	4b06      	ldr	r3, [pc, #24]	; (8002534 <HAL_RCC_OscConfig+0x470>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d1f0      	bne.n	8002508 <HAL_RCC_OscConfig+0x444>
 8002526:	e03d      	b.n	80025a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	699b      	ldr	r3, [r3, #24]
 800252c:	2b01      	cmp	r3, #1
 800252e:	d107      	bne.n	8002540 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e038      	b.n	80025a6 <HAL_RCC_OscConfig+0x4e2>
 8002534:	40023800 	.word	0x40023800
 8002538:	40007000 	.word	0x40007000
 800253c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002540:	4b1b      	ldr	r3, [pc, #108]	; (80025b0 <HAL_RCC_OscConfig+0x4ec>)
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	699b      	ldr	r3, [r3, #24]
 800254a:	2b01      	cmp	r3, #1
 800254c:	d028      	beq.n	80025a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002558:	429a      	cmp	r2, r3
 800255a:	d121      	bne.n	80025a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002566:	429a      	cmp	r2, r3
 8002568:	d11a      	bne.n	80025a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800256a:	68fa      	ldr	r2, [r7, #12]
 800256c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002570:	4013      	ands	r3, r2
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002576:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002578:	4293      	cmp	r3, r2
 800257a:	d111      	bne.n	80025a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002586:	085b      	lsrs	r3, r3, #1
 8002588:	3b01      	subs	r3, #1
 800258a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800258c:	429a      	cmp	r2, r3
 800258e:	d107      	bne.n	80025a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800259a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800259c:	429a      	cmp	r2, r3
 800259e:	d001      	beq.n	80025a4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e000      	b.n	80025a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3718      	adds	r7, #24
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	40023800 	.word	0x40023800

080025b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d101      	bne.n	80025c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e0cc      	b.n	8002762 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025c8:	4b68      	ldr	r3, [pc, #416]	; (800276c <HAL_RCC_ClockConfig+0x1b8>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0307 	and.w	r3, r3, #7
 80025d0:	683a      	ldr	r2, [r7, #0]
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d90c      	bls.n	80025f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025d6:	4b65      	ldr	r3, [pc, #404]	; (800276c <HAL_RCC_ClockConfig+0x1b8>)
 80025d8:	683a      	ldr	r2, [r7, #0]
 80025da:	b2d2      	uxtb	r2, r2
 80025dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025de:	4b63      	ldr	r3, [pc, #396]	; (800276c <HAL_RCC_ClockConfig+0x1b8>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0307 	and.w	r3, r3, #7
 80025e6:	683a      	ldr	r2, [r7, #0]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d001      	beq.n	80025f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e0b8      	b.n	8002762 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0302 	and.w	r3, r3, #2
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d020      	beq.n	800263e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0304 	and.w	r3, r3, #4
 8002604:	2b00      	cmp	r3, #0
 8002606:	d005      	beq.n	8002614 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002608:	4b59      	ldr	r3, [pc, #356]	; (8002770 <HAL_RCC_ClockConfig+0x1bc>)
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	4a58      	ldr	r2, [pc, #352]	; (8002770 <HAL_RCC_ClockConfig+0x1bc>)
 800260e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002612:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0308 	and.w	r3, r3, #8
 800261c:	2b00      	cmp	r3, #0
 800261e:	d005      	beq.n	800262c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002620:	4b53      	ldr	r3, [pc, #332]	; (8002770 <HAL_RCC_ClockConfig+0x1bc>)
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	4a52      	ldr	r2, [pc, #328]	; (8002770 <HAL_RCC_ClockConfig+0x1bc>)
 8002626:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800262a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800262c:	4b50      	ldr	r3, [pc, #320]	; (8002770 <HAL_RCC_ClockConfig+0x1bc>)
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	494d      	ldr	r1, [pc, #308]	; (8002770 <HAL_RCC_ClockConfig+0x1bc>)
 800263a:	4313      	orrs	r3, r2
 800263c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	2b00      	cmp	r3, #0
 8002648:	d044      	beq.n	80026d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	2b01      	cmp	r3, #1
 8002650:	d107      	bne.n	8002662 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002652:	4b47      	ldr	r3, [pc, #284]	; (8002770 <HAL_RCC_ClockConfig+0x1bc>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d119      	bne.n	8002692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e07f      	b.n	8002762 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	2b02      	cmp	r3, #2
 8002668:	d003      	beq.n	8002672 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800266e:	2b03      	cmp	r3, #3
 8002670:	d107      	bne.n	8002682 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002672:	4b3f      	ldr	r3, [pc, #252]	; (8002770 <HAL_RCC_ClockConfig+0x1bc>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d109      	bne.n	8002692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e06f      	b.n	8002762 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002682:	4b3b      	ldr	r3, [pc, #236]	; (8002770 <HAL_RCC_ClockConfig+0x1bc>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d101      	bne.n	8002692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e067      	b.n	8002762 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002692:	4b37      	ldr	r3, [pc, #220]	; (8002770 <HAL_RCC_ClockConfig+0x1bc>)
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	f023 0203 	bic.w	r2, r3, #3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	4934      	ldr	r1, [pc, #208]	; (8002770 <HAL_RCC_ClockConfig+0x1bc>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026a4:	f7fe fe32 	bl	800130c <HAL_GetTick>
 80026a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026aa:	e00a      	b.n	80026c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026ac:	f7fe fe2e 	bl	800130c <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e04f      	b.n	8002762 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026c2:	4b2b      	ldr	r3, [pc, #172]	; (8002770 <HAL_RCC_ClockConfig+0x1bc>)
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	f003 020c 	and.w	r2, r3, #12
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d1eb      	bne.n	80026ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026d4:	4b25      	ldr	r3, [pc, #148]	; (800276c <HAL_RCC_ClockConfig+0x1b8>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0307 	and.w	r3, r3, #7
 80026dc:	683a      	ldr	r2, [r7, #0]
 80026de:	429a      	cmp	r2, r3
 80026e0:	d20c      	bcs.n	80026fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026e2:	4b22      	ldr	r3, [pc, #136]	; (800276c <HAL_RCC_ClockConfig+0x1b8>)
 80026e4:	683a      	ldr	r2, [r7, #0]
 80026e6:	b2d2      	uxtb	r2, r2
 80026e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ea:	4b20      	ldr	r3, [pc, #128]	; (800276c <HAL_RCC_ClockConfig+0x1b8>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0307 	and.w	r3, r3, #7
 80026f2:	683a      	ldr	r2, [r7, #0]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d001      	beq.n	80026fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e032      	b.n	8002762 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0304 	and.w	r3, r3, #4
 8002704:	2b00      	cmp	r3, #0
 8002706:	d008      	beq.n	800271a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002708:	4b19      	ldr	r3, [pc, #100]	; (8002770 <HAL_RCC_ClockConfig+0x1bc>)
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	4916      	ldr	r1, [pc, #88]	; (8002770 <HAL_RCC_ClockConfig+0x1bc>)
 8002716:	4313      	orrs	r3, r2
 8002718:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0308 	and.w	r3, r3, #8
 8002722:	2b00      	cmp	r3, #0
 8002724:	d009      	beq.n	800273a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002726:	4b12      	ldr	r3, [pc, #72]	; (8002770 <HAL_RCC_ClockConfig+0x1bc>)
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	00db      	lsls	r3, r3, #3
 8002734:	490e      	ldr	r1, [pc, #56]	; (8002770 <HAL_RCC_ClockConfig+0x1bc>)
 8002736:	4313      	orrs	r3, r2
 8002738:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800273a:	f000 f821 	bl	8002780 <HAL_RCC_GetSysClockFreq>
 800273e:	4602      	mov	r2, r0
 8002740:	4b0b      	ldr	r3, [pc, #44]	; (8002770 <HAL_RCC_ClockConfig+0x1bc>)
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	091b      	lsrs	r3, r3, #4
 8002746:	f003 030f 	and.w	r3, r3, #15
 800274a:	490a      	ldr	r1, [pc, #40]	; (8002774 <HAL_RCC_ClockConfig+0x1c0>)
 800274c:	5ccb      	ldrb	r3, [r1, r3]
 800274e:	fa22 f303 	lsr.w	r3, r2, r3
 8002752:	4a09      	ldr	r2, [pc, #36]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 8002754:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002756:	4b09      	ldr	r3, [pc, #36]	; (800277c <HAL_RCC_ClockConfig+0x1c8>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4618      	mov	r0, r3
 800275c:	f7fe fd92 	bl	8001284 <HAL_InitTick>

  return HAL_OK;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3710      	adds	r7, #16
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	40023c00 	.word	0x40023c00
 8002770:	40023800 	.word	0x40023800
 8002774:	080039a0 	.word	0x080039a0
 8002778:	2000003c 	.word	0x2000003c
 800277c:	20000040 	.word	0x20000040

08002780 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002780:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002784:	b094      	sub	sp, #80	; 0x50
 8002786:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002788:	2300      	movs	r3, #0
 800278a:	647b      	str	r3, [r7, #68]	; 0x44
 800278c:	2300      	movs	r3, #0
 800278e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002790:	2300      	movs	r3, #0
 8002792:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002794:	2300      	movs	r3, #0
 8002796:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002798:	4b79      	ldr	r3, [pc, #484]	; (8002980 <HAL_RCC_GetSysClockFreq+0x200>)
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f003 030c 	and.w	r3, r3, #12
 80027a0:	2b08      	cmp	r3, #8
 80027a2:	d00d      	beq.n	80027c0 <HAL_RCC_GetSysClockFreq+0x40>
 80027a4:	2b08      	cmp	r3, #8
 80027a6:	f200 80e1 	bhi.w	800296c <HAL_RCC_GetSysClockFreq+0x1ec>
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d002      	beq.n	80027b4 <HAL_RCC_GetSysClockFreq+0x34>
 80027ae:	2b04      	cmp	r3, #4
 80027b0:	d003      	beq.n	80027ba <HAL_RCC_GetSysClockFreq+0x3a>
 80027b2:	e0db      	b.n	800296c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027b4:	4b73      	ldr	r3, [pc, #460]	; (8002984 <HAL_RCC_GetSysClockFreq+0x204>)
 80027b6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80027b8:	e0db      	b.n	8002972 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027ba:	4b73      	ldr	r3, [pc, #460]	; (8002988 <HAL_RCC_GetSysClockFreq+0x208>)
 80027bc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027be:	e0d8      	b.n	8002972 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027c0:	4b6f      	ldr	r3, [pc, #444]	; (8002980 <HAL_RCC_GetSysClockFreq+0x200>)
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027c8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027ca:	4b6d      	ldr	r3, [pc, #436]	; (8002980 <HAL_RCC_GetSysClockFreq+0x200>)
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d063      	beq.n	800289e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027d6:	4b6a      	ldr	r3, [pc, #424]	; (8002980 <HAL_RCC_GetSysClockFreq+0x200>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	099b      	lsrs	r3, r3, #6
 80027dc:	2200      	movs	r2, #0
 80027de:	63bb      	str	r3, [r7, #56]	; 0x38
 80027e0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80027e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027e8:	633b      	str	r3, [r7, #48]	; 0x30
 80027ea:	2300      	movs	r3, #0
 80027ec:	637b      	str	r3, [r7, #52]	; 0x34
 80027ee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80027f2:	4622      	mov	r2, r4
 80027f4:	462b      	mov	r3, r5
 80027f6:	f04f 0000 	mov.w	r0, #0
 80027fa:	f04f 0100 	mov.w	r1, #0
 80027fe:	0159      	lsls	r1, r3, #5
 8002800:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002804:	0150      	lsls	r0, r2, #5
 8002806:	4602      	mov	r2, r0
 8002808:	460b      	mov	r3, r1
 800280a:	4621      	mov	r1, r4
 800280c:	1a51      	subs	r1, r2, r1
 800280e:	6139      	str	r1, [r7, #16]
 8002810:	4629      	mov	r1, r5
 8002812:	eb63 0301 	sbc.w	r3, r3, r1
 8002816:	617b      	str	r3, [r7, #20]
 8002818:	f04f 0200 	mov.w	r2, #0
 800281c:	f04f 0300 	mov.w	r3, #0
 8002820:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002824:	4659      	mov	r1, fp
 8002826:	018b      	lsls	r3, r1, #6
 8002828:	4651      	mov	r1, sl
 800282a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800282e:	4651      	mov	r1, sl
 8002830:	018a      	lsls	r2, r1, #6
 8002832:	4651      	mov	r1, sl
 8002834:	ebb2 0801 	subs.w	r8, r2, r1
 8002838:	4659      	mov	r1, fp
 800283a:	eb63 0901 	sbc.w	r9, r3, r1
 800283e:	f04f 0200 	mov.w	r2, #0
 8002842:	f04f 0300 	mov.w	r3, #0
 8002846:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800284a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800284e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002852:	4690      	mov	r8, r2
 8002854:	4699      	mov	r9, r3
 8002856:	4623      	mov	r3, r4
 8002858:	eb18 0303 	adds.w	r3, r8, r3
 800285c:	60bb      	str	r3, [r7, #8]
 800285e:	462b      	mov	r3, r5
 8002860:	eb49 0303 	adc.w	r3, r9, r3
 8002864:	60fb      	str	r3, [r7, #12]
 8002866:	f04f 0200 	mov.w	r2, #0
 800286a:	f04f 0300 	mov.w	r3, #0
 800286e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002872:	4629      	mov	r1, r5
 8002874:	024b      	lsls	r3, r1, #9
 8002876:	4621      	mov	r1, r4
 8002878:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800287c:	4621      	mov	r1, r4
 800287e:	024a      	lsls	r2, r1, #9
 8002880:	4610      	mov	r0, r2
 8002882:	4619      	mov	r1, r3
 8002884:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002886:	2200      	movs	r2, #0
 8002888:	62bb      	str	r3, [r7, #40]	; 0x28
 800288a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800288c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002890:	f7fd fcee 	bl	8000270 <__aeabi_uldivmod>
 8002894:	4602      	mov	r2, r0
 8002896:	460b      	mov	r3, r1
 8002898:	4613      	mov	r3, r2
 800289a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800289c:	e058      	b.n	8002950 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800289e:	4b38      	ldr	r3, [pc, #224]	; (8002980 <HAL_RCC_GetSysClockFreq+0x200>)
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	099b      	lsrs	r3, r3, #6
 80028a4:	2200      	movs	r2, #0
 80028a6:	4618      	mov	r0, r3
 80028a8:	4611      	mov	r1, r2
 80028aa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80028ae:	623b      	str	r3, [r7, #32]
 80028b0:	2300      	movs	r3, #0
 80028b2:	627b      	str	r3, [r7, #36]	; 0x24
 80028b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80028b8:	4642      	mov	r2, r8
 80028ba:	464b      	mov	r3, r9
 80028bc:	f04f 0000 	mov.w	r0, #0
 80028c0:	f04f 0100 	mov.w	r1, #0
 80028c4:	0159      	lsls	r1, r3, #5
 80028c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028ca:	0150      	lsls	r0, r2, #5
 80028cc:	4602      	mov	r2, r0
 80028ce:	460b      	mov	r3, r1
 80028d0:	4641      	mov	r1, r8
 80028d2:	ebb2 0a01 	subs.w	sl, r2, r1
 80028d6:	4649      	mov	r1, r9
 80028d8:	eb63 0b01 	sbc.w	fp, r3, r1
 80028dc:	f04f 0200 	mov.w	r2, #0
 80028e0:	f04f 0300 	mov.w	r3, #0
 80028e4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80028e8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80028ec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80028f0:	ebb2 040a 	subs.w	r4, r2, sl
 80028f4:	eb63 050b 	sbc.w	r5, r3, fp
 80028f8:	f04f 0200 	mov.w	r2, #0
 80028fc:	f04f 0300 	mov.w	r3, #0
 8002900:	00eb      	lsls	r3, r5, #3
 8002902:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002906:	00e2      	lsls	r2, r4, #3
 8002908:	4614      	mov	r4, r2
 800290a:	461d      	mov	r5, r3
 800290c:	4643      	mov	r3, r8
 800290e:	18e3      	adds	r3, r4, r3
 8002910:	603b      	str	r3, [r7, #0]
 8002912:	464b      	mov	r3, r9
 8002914:	eb45 0303 	adc.w	r3, r5, r3
 8002918:	607b      	str	r3, [r7, #4]
 800291a:	f04f 0200 	mov.w	r2, #0
 800291e:	f04f 0300 	mov.w	r3, #0
 8002922:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002926:	4629      	mov	r1, r5
 8002928:	028b      	lsls	r3, r1, #10
 800292a:	4621      	mov	r1, r4
 800292c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002930:	4621      	mov	r1, r4
 8002932:	028a      	lsls	r2, r1, #10
 8002934:	4610      	mov	r0, r2
 8002936:	4619      	mov	r1, r3
 8002938:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800293a:	2200      	movs	r2, #0
 800293c:	61bb      	str	r3, [r7, #24]
 800293e:	61fa      	str	r2, [r7, #28]
 8002940:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002944:	f7fd fc94 	bl	8000270 <__aeabi_uldivmod>
 8002948:	4602      	mov	r2, r0
 800294a:	460b      	mov	r3, r1
 800294c:	4613      	mov	r3, r2
 800294e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002950:	4b0b      	ldr	r3, [pc, #44]	; (8002980 <HAL_RCC_GetSysClockFreq+0x200>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	0c1b      	lsrs	r3, r3, #16
 8002956:	f003 0303 	and.w	r3, r3, #3
 800295a:	3301      	adds	r3, #1
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002960:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002962:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002964:	fbb2 f3f3 	udiv	r3, r2, r3
 8002968:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800296a:	e002      	b.n	8002972 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800296c:	4b05      	ldr	r3, [pc, #20]	; (8002984 <HAL_RCC_GetSysClockFreq+0x204>)
 800296e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002970:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002972:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002974:	4618      	mov	r0, r3
 8002976:	3750      	adds	r7, #80	; 0x50
 8002978:	46bd      	mov	sp, r7
 800297a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800297e:	bf00      	nop
 8002980:	40023800 	.word	0x40023800
 8002984:	00f42400 	.word	0x00f42400
 8002988:	007a1200 	.word	0x007a1200

0800298c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d101      	bne.n	800299e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e041      	b.n	8002a22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d106      	bne.n	80029b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f7fe fb76 	bl	80010a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2202      	movs	r2, #2
 80029bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	3304      	adds	r3, #4
 80029c8:	4619      	mov	r1, r3
 80029ca:	4610      	mov	r0, r2
 80029cc:	f000 f95e 	bl	8002c8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3708      	adds	r7, #8
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
	...

08002a2c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b085      	sub	sp, #20
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d001      	beq.n	8002a44 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e046      	b.n	8002ad2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2202      	movs	r2, #2
 8002a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a23      	ldr	r2, [pc, #140]	; (8002ae0 <HAL_TIM_Base_Start+0xb4>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d022      	beq.n	8002a9c <HAL_TIM_Base_Start+0x70>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a5e:	d01d      	beq.n	8002a9c <HAL_TIM_Base_Start+0x70>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a1f      	ldr	r2, [pc, #124]	; (8002ae4 <HAL_TIM_Base_Start+0xb8>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d018      	beq.n	8002a9c <HAL_TIM_Base_Start+0x70>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a1e      	ldr	r2, [pc, #120]	; (8002ae8 <HAL_TIM_Base_Start+0xbc>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d013      	beq.n	8002a9c <HAL_TIM_Base_Start+0x70>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a1c      	ldr	r2, [pc, #112]	; (8002aec <HAL_TIM_Base_Start+0xc0>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d00e      	beq.n	8002a9c <HAL_TIM_Base_Start+0x70>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a1b      	ldr	r2, [pc, #108]	; (8002af0 <HAL_TIM_Base_Start+0xc4>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d009      	beq.n	8002a9c <HAL_TIM_Base_Start+0x70>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a19      	ldr	r2, [pc, #100]	; (8002af4 <HAL_TIM_Base_Start+0xc8>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d004      	beq.n	8002a9c <HAL_TIM_Base_Start+0x70>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a18      	ldr	r2, [pc, #96]	; (8002af8 <HAL_TIM_Base_Start+0xcc>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d111      	bne.n	8002ac0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f003 0307 	and.w	r3, r3, #7
 8002aa6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2b06      	cmp	r3, #6
 8002aac:	d010      	beq.n	8002ad0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f042 0201 	orr.w	r2, r2, #1
 8002abc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002abe:	e007      	b.n	8002ad0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f042 0201 	orr.w	r2, r2, #1
 8002ace:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3714      	adds	r7, #20
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	40010000 	.word	0x40010000
 8002ae4:	40000400 	.word	0x40000400
 8002ae8:	40000800 	.word	0x40000800
 8002aec:	40000c00 	.word	0x40000c00
 8002af0:	40010400 	.word	0x40010400
 8002af4:	40014000 	.word	0x40014000
 8002af8:	40001800 	.word	0x40001800

08002afc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b06:	2300      	movs	r3, #0
 8002b08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d101      	bne.n	8002b18 <HAL_TIM_ConfigClockSource+0x1c>
 8002b14:	2302      	movs	r3, #2
 8002b16:	e0b4      	b.n	8002c82 <HAL_TIM_ConfigClockSource+0x186>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2202      	movs	r2, #2
 8002b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	68ba      	ldr	r2, [r7, #8]
 8002b46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b50:	d03e      	beq.n	8002bd0 <HAL_TIM_ConfigClockSource+0xd4>
 8002b52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b56:	f200 8087 	bhi.w	8002c68 <HAL_TIM_ConfigClockSource+0x16c>
 8002b5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b5e:	f000 8086 	beq.w	8002c6e <HAL_TIM_ConfigClockSource+0x172>
 8002b62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b66:	d87f      	bhi.n	8002c68 <HAL_TIM_ConfigClockSource+0x16c>
 8002b68:	2b70      	cmp	r3, #112	; 0x70
 8002b6a:	d01a      	beq.n	8002ba2 <HAL_TIM_ConfigClockSource+0xa6>
 8002b6c:	2b70      	cmp	r3, #112	; 0x70
 8002b6e:	d87b      	bhi.n	8002c68 <HAL_TIM_ConfigClockSource+0x16c>
 8002b70:	2b60      	cmp	r3, #96	; 0x60
 8002b72:	d050      	beq.n	8002c16 <HAL_TIM_ConfigClockSource+0x11a>
 8002b74:	2b60      	cmp	r3, #96	; 0x60
 8002b76:	d877      	bhi.n	8002c68 <HAL_TIM_ConfigClockSource+0x16c>
 8002b78:	2b50      	cmp	r3, #80	; 0x50
 8002b7a:	d03c      	beq.n	8002bf6 <HAL_TIM_ConfigClockSource+0xfa>
 8002b7c:	2b50      	cmp	r3, #80	; 0x50
 8002b7e:	d873      	bhi.n	8002c68 <HAL_TIM_ConfigClockSource+0x16c>
 8002b80:	2b40      	cmp	r3, #64	; 0x40
 8002b82:	d058      	beq.n	8002c36 <HAL_TIM_ConfigClockSource+0x13a>
 8002b84:	2b40      	cmp	r3, #64	; 0x40
 8002b86:	d86f      	bhi.n	8002c68 <HAL_TIM_ConfigClockSource+0x16c>
 8002b88:	2b30      	cmp	r3, #48	; 0x30
 8002b8a:	d064      	beq.n	8002c56 <HAL_TIM_ConfigClockSource+0x15a>
 8002b8c:	2b30      	cmp	r3, #48	; 0x30
 8002b8e:	d86b      	bhi.n	8002c68 <HAL_TIM_ConfigClockSource+0x16c>
 8002b90:	2b20      	cmp	r3, #32
 8002b92:	d060      	beq.n	8002c56 <HAL_TIM_ConfigClockSource+0x15a>
 8002b94:	2b20      	cmp	r3, #32
 8002b96:	d867      	bhi.n	8002c68 <HAL_TIM_ConfigClockSource+0x16c>
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d05c      	beq.n	8002c56 <HAL_TIM_ConfigClockSource+0x15a>
 8002b9c:	2b10      	cmp	r3, #16
 8002b9e:	d05a      	beq.n	8002c56 <HAL_TIM_ConfigClockSource+0x15a>
 8002ba0:	e062      	b.n	8002c68 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6818      	ldr	r0, [r3, #0]
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	6899      	ldr	r1, [r3, #8]
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	685a      	ldr	r2, [r3, #4]
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	f000 f985 	bl	8002ec0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002bc4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	68ba      	ldr	r2, [r7, #8]
 8002bcc:	609a      	str	r2, [r3, #8]
      break;
 8002bce:	e04f      	b.n	8002c70 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6818      	ldr	r0, [r3, #0]
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	6899      	ldr	r1, [r3, #8]
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685a      	ldr	r2, [r3, #4]
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	f000 f96e 	bl	8002ec0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	689a      	ldr	r2, [r3, #8]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002bf2:	609a      	str	r2, [r3, #8]
      break;
 8002bf4:	e03c      	b.n	8002c70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6818      	ldr	r0, [r3, #0]
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	6859      	ldr	r1, [r3, #4]
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	461a      	mov	r2, r3
 8002c04:	f000 f8e2 	bl	8002dcc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2150      	movs	r1, #80	; 0x50
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f000 f93b 	bl	8002e8a <TIM_ITRx_SetConfig>
      break;
 8002c14:	e02c      	b.n	8002c70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6818      	ldr	r0, [r3, #0]
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	6859      	ldr	r1, [r3, #4]
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	461a      	mov	r2, r3
 8002c24:	f000 f901 	bl	8002e2a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2160      	movs	r1, #96	; 0x60
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f000 f92b 	bl	8002e8a <TIM_ITRx_SetConfig>
      break;
 8002c34:	e01c      	b.n	8002c70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6818      	ldr	r0, [r3, #0]
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	6859      	ldr	r1, [r3, #4]
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	461a      	mov	r2, r3
 8002c44:	f000 f8c2 	bl	8002dcc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2140      	movs	r1, #64	; 0x40
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f000 f91b 	bl	8002e8a <TIM_ITRx_SetConfig>
      break;
 8002c54:	e00c      	b.n	8002c70 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4619      	mov	r1, r3
 8002c60:	4610      	mov	r0, r2
 8002c62:	f000 f912 	bl	8002e8a <TIM_ITRx_SetConfig>
      break;
 8002c66:	e003      	b.n	8002c70 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	73fb      	strb	r3, [r7, #15]
      break;
 8002c6c:	e000      	b.n	8002c70 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002c6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3710      	adds	r7, #16
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
	...

08002c8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b085      	sub	sp, #20
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4a40      	ldr	r2, [pc, #256]	; (8002da0 <TIM_Base_SetConfig+0x114>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d013      	beq.n	8002ccc <TIM_Base_SetConfig+0x40>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002caa:	d00f      	beq.n	8002ccc <TIM_Base_SetConfig+0x40>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	4a3d      	ldr	r2, [pc, #244]	; (8002da4 <TIM_Base_SetConfig+0x118>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d00b      	beq.n	8002ccc <TIM_Base_SetConfig+0x40>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	4a3c      	ldr	r2, [pc, #240]	; (8002da8 <TIM_Base_SetConfig+0x11c>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d007      	beq.n	8002ccc <TIM_Base_SetConfig+0x40>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	4a3b      	ldr	r2, [pc, #236]	; (8002dac <TIM_Base_SetConfig+0x120>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d003      	beq.n	8002ccc <TIM_Base_SetConfig+0x40>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	4a3a      	ldr	r2, [pc, #232]	; (8002db0 <TIM_Base_SetConfig+0x124>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d108      	bne.n	8002cde <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	68fa      	ldr	r2, [r7, #12]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a2f      	ldr	r2, [pc, #188]	; (8002da0 <TIM_Base_SetConfig+0x114>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d02b      	beq.n	8002d3e <TIM_Base_SetConfig+0xb2>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cec:	d027      	beq.n	8002d3e <TIM_Base_SetConfig+0xb2>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a2c      	ldr	r2, [pc, #176]	; (8002da4 <TIM_Base_SetConfig+0x118>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d023      	beq.n	8002d3e <TIM_Base_SetConfig+0xb2>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a2b      	ldr	r2, [pc, #172]	; (8002da8 <TIM_Base_SetConfig+0x11c>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d01f      	beq.n	8002d3e <TIM_Base_SetConfig+0xb2>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a2a      	ldr	r2, [pc, #168]	; (8002dac <TIM_Base_SetConfig+0x120>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d01b      	beq.n	8002d3e <TIM_Base_SetConfig+0xb2>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a29      	ldr	r2, [pc, #164]	; (8002db0 <TIM_Base_SetConfig+0x124>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d017      	beq.n	8002d3e <TIM_Base_SetConfig+0xb2>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a28      	ldr	r2, [pc, #160]	; (8002db4 <TIM_Base_SetConfig+0x128>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d013      	beq.n	8002d3e <TIM_Base_SetConfig+0xb2>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a27      	ldr	r2, [pc, #156]	; (8002db8 <TIM_Base_SetConfig+0x12c>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d00f      	beq.n	8002d3e <TIM_Base_SetConfig+0xb2>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a26      	ldr	r2, [pc, #152]	; (8002dbc <TIM_Base_SetConfig+0x130>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d00b      	beq.n	8002d3e <TIM_Base_SetConfig+0xb2>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a25      	ldr	r2, [pc, #148]	; (8002dc0 <TIM_Base_SetConfig+0x134>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d007      	beq.n	8002d3e <TIM_Base_SetConfig+0xb2>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a24      	ldr	r2, [pc, #144]	; (8002dc4 <TIM_Base_SetConfig+0x138>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d003      	beq.n	8002d3e <TIM_Base_SetConfig+0xb2>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a23      	ldr	r2, [pc, #140]	; (8002dc8 <TIM_Base_SetConfig+0x13c>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d108      	bne.n	8002d50 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	68fa      	ldr	r2, [r7, #12]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	695b      	ldr	r3, [r3, #20]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	68fa      	ldr	r2, [r7, #12]
 8002d62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	689a      	ldr	r2, [r3, #8]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	4a0a      	ldr	r2, [pc, #40]	; (8002da0 <TIM_Base_SetConfig+0x114>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d003      	beq.n	8002d84 <TIM_Base_SetConfig+0xf8>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	4a0c      	ldr	r2, [pc, #48]	; (8002db0 <TIM_Base_SetConfig+0x124>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d103      	bne.n	8002d8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	691a      	ldr	r2, [r3, #16]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	615a      	str	r2, [r3, #20]
}
 8002d92:	bf00      	nop
 8002d94:	3714      	adds	r7, #20
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	40010000 	.word	0x40010000
 8002da4:	40000400 	.word	0x40000400
 8002da8:	40000800 	.word	0x40000800
 8002dac:	40000c00 	.word	0x40000c00
 8002db0:	40010400 	.word	0x40010400
 8002db4:	40014000 	.word	0x40014000
 8002db8:	40014400 	.word	0x40014400
 8002dbc:	40014800 	.word	0x40014800
 8002dc0:	40001800 	.word	0x40001800
 8002dc4:	40001c00 	.word	0x40001c00
 8002dc8:	40002000 	.word	0x40002000

08002dcc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b087      	sub	sp, #28
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	60b9      	str	r1, [r7, #8]
 8002dd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6a1b      	ldr	r3, [r3, #32]
 8002ddc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	6a1b      	ldr	r3, [r3, #32]
 8002de2:	f023 0201 	bic.w	r2, r3, #1
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	699b      	ldr	r3, [r3, #24]
 8002dee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002df6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	011b      	lsls	r3, r3, #4
 8002dfc:	693a      	ldr	r2, [r7, #16]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	f023 030a 	bic.w	r3, r3, #10
 8002e08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e0a:	697a      	ldr	r2, [r7, #20]
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	693a      	ldr	r2, [r7, #16]
 8002e16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	697a      	ldr	r2, [r7, #20]
 8002e1c:	621a      	str	r2, [r3, #32]
}
 8002e1e:	bf00      	nop
 8002e20:	371c      	adds	r7, #28
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr

08002e2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e2a:	b480      	push	{r7}
 8002e2c:	b087      	sub	sp, #28
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	60f8      	str	r0, [r7, #12]
 8002e32:	60b9      	str	r1, [r7, #8]
 8002e34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	6a1b      	ldr	r3, [r3, #32]
 8002e3a:	f023 0210 	bic.w	r2, r3, #16
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	699b      	ldr	r3, [r3, #24]
 8002e46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6a1b      	ldr	r3, [r3, #32]
 8002e4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	031b      	lsls	r3, r3, #12
 8002e5a:	697a      	ldr	r2, [r7, #20]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e66:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	011b      	lsls	r3, r3, #4
 8002e6c:	693a      	ldr	r2, [r7, #16]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	697a      	ldr	r2, [r7, #20]
 8002e76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	693a      	ldr	r2, [r7, #16]
 8002e7c:	621a      	str	r2, [r3, #32]
}
 8002e7e:	bf00      	nop
 8002e80:	371c      	adds	r7, #28
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr

08002e8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e8a:	b480      	push	{r7}
 8002e8c:	b085      	sub	sp, #20
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
 8002e92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ea0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ea2:	683a      	ldr	r2, [r7, #0]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	f043 0307 	orr.w	r3, r3, #7
 8002eac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	68fa      	ldr	r2, [r7, #12]
 8002eb2:	609a      	str	r2, [r3, #8]
}
 8002eb4:	bf00      	nop
 8002eb6:	3714      	adds	r7, #20
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b087      	sub	sp, #28
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	607a      	str	r2, [r7, #4]
 8002ecc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002eda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	021a      	lsls	r2, r3, #8
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	431a      	orrs	r2, r3
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	697a      	ldr	r2, [r7, #20]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	697a      	ldr	r2, [r7, #20]
 8002ef2:	609a      	str	r2, [r3, #8]
}
 8002ef4:	bf00      	nop
 8002ef6:	371c      	adds	r7, #28
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b085      	sub	sp, #20
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d101      	bne.n	8002f18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f14:	2302      	movs	r3, #2
 8002f16:	e05a      	b.n	8002fce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2202      	movs	r2, #2
 8002f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	68fa      	ldr	r2, [r7, #12]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	68fa      	ldr	r2, [r7, #12]
 8002f50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a21      	ldr	r2, [pc, #132]	; (8002fdc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d022      	beq.n	8002fa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f64:	d01d      	beq.n	8002fa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a1d      	ldr	r2, [pc, #116]	; (8002fe0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d018      	beq.n	8002fa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a1b      	ldr	r2, [pc, #108]	; (8002fe4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d013      	beq.n	8002fa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a1a      	ldr	r2, [pc, #104]	; (8002fe8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d00e      	beq.n	8002fa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a18      	ldr	r2, [pc, #96]	; (8002fec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d009      	beq.n	8002fa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a17      	ldr	r2, [pc, #92]	; (8002ff0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d004      	beq.n	8002fa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a15      	ldr	r2, [pc, #84]	; (8002ff4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d10c      	bne.n	8002fbc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fa8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	68ba      	ldr	r2, [r7, #8]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	68ba      	ldr	r2, [r7, #8]
 8002fba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3714      	adds	r7, #20
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr
 8002fda:	bf00      	nop
 8002fdc:	40010000 	.word	0x40010000
 8002fe0:	40000400 	.word	0x40000400
 8002fe4:	40000800 	.word	0x40000800
 8002fe8:	40000c00 	.word	0x40000c00
 8002fec:	40010400 	.word	0x40010400
 8002ff0:	40014000 	.word	0x40014000
 8002ff4:	40001800 	.word	0x40001800

08002ff8 <__errno>:
 8002ff8:	4b01      	ldr	r3, [pc, #4]	; (8003000 <__errno+0x8>)
 8002ffa:	6818      	ldr	r0, [r3, #0]
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	20000048 	.word	0x20000048

08003004 <__libc_init_array>:
 8003004:	b570      	push	{r4, r5, r6, lr}
 8003006:	4d0d      	ldr	r5, [pc, #52]	; (800303c <__libc_init_array+0x38>)
 8003008:	4c0d      	ldr	r4, [pc, #52]	; (8003040 <__libc_init_array+0x3c>)
 800300a:	1b64      	subs	r4, r4, r5
 800300c:	10a4      	asrs	r4, r4, #2
 800300e:	2600      	movs	r6, #0
 8003010:	42a6      	cmp	r6, r4
 8003012:	d109      	bne.n	8003028 <__libc_init_array+0x24>
 8003014:	4d0b      	ldr	r5, [pc, #44]	; (8003044 <__libc_init_array+0x40>)
 8003016:	4c0c      	ldr	r4, [pc, #48]	; (8003048 <__libc_init_array+0x44>)
 8003018:	f000 fc8e 	bl	8003938 <_init>
 800301c:	1b64      	subs	r4, r4, r5
 800301e:	10a4      	asrs	r4, r4, #2
 8003020:	2600      	movs	r6, #0
 8003022:	42a6      	cmp	r6, r4
 8003024:	d105      	bne.n	8003032 <__libc_init_array+0x2e>
 8003026:	bd70      	pop	{r4, r5, r6, pc}
 8003028:	f855 3b04 	ldr.w	r3, [r5], #4
 800302c:	4798      	blx	r3
 800302e:	3601      	adds	r6, #1
 8003030:	e7ee      	b.n	8003010 <__libc_init_array+0xc>
 8003032:	f855 3b04 	ldr.w	r3, [r5], #4
 8003036:	4798      	blx	r3
 8003038:	3601      	adds	r6, #1
 800303a:	e7f2      	b.n	8003022 <__libc_init_array+0x1e>
 800303c:	080039ec 	.word	0x080039ec
 8003040:	080039ec 	.word	0x080039ec
 8003044:	080039ec 	.word	0x080039ec
 8003048:	080039f0 	.word	0x080039f0

0800304c <memset>:
 800304c:	4402      	add	r2, r0
 800304e:	4603      	mov	r3, r0
 8003050:	4293      	cmp	r3, r2
 8003052:	d100      	bne.n	8003056 <memset+0xa>
 8003054:	4770      	bx	lr
 8003056:	f803 1b01 	strb.w	r1, [r3], #1
 800305a:	e7f9      	b.n	8003050 <memset+0x4>

0800305c <siprintf>:
 800305c:	b40e      	push	{r1, r2, r3}
 800305e:	b500      	push	{lr}
 8003060:	b09c      	sub	sp, #112	; 0x70
 8003062:	ab1d      	add	r3, sp, #116	; 0x74
 8003064:	9002      	str	r0, [sp, #8]
 8003066:	9006      	str	r0, [sp, #24]
 8003068:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800306c:	4809      	ldr	r0, [pc, #36]	; (8003094 <siprintf+0x38>)
 800306e:	9107      	str	r1, [sp, #28]
 8003070:	9104      	str	r1, [sp, #16]
 8003072:	4909      	ldr	r1, [pc, #36]	; (8003098 <siprintf+0x3c>)
 8003074:	f853 2b04 	ldr.w	r2, [r3], #4
 8003078:	9105      	str	r1, [sp, #20]
 800307a:	6800      	ldr	r0, [r0, #0]
 800307c:	9301      	str	r3, [sp, #4]
 800307e:	a902      	add	r1, sp, #8
 8003080:	f000 f868 	bl	8003154 <_svfiprintf_r>
 8003084:	9b02      	ldr	r3, [sp, #8]
 8003086:	2200      	movs	r2, #0
 8003088:	701a      	strb	r2, [r3, #0]
 800308a:	b01c      	add	sp, #112	; 0x70
 800308c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003090:	b003      	add	sp, #12
 8003092:	4770      	bx	lr
 8003094:	20000048 	.word	0x20000048
 8003098:	ffff0208 	.word	0xffff0208

0800309c <__ssputs_r>:
 800309c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030a0:	688e      	ldr	r6, [r1, #8]
 80030a2:	429e      	cmp	r6, r3
 80030a4:	4682      	mov	sl, r0
 80030a6:	460c      	mov	r4, r1
 80030a8:	4690      	mov	r8, r2
 80030aa:	461f      	mov	r7, r3
 80030ac:	d838      	bhi.n	8003120 <__ssputs_r+0x84>
 80030ae:	898a      	ldrh	r2, [r1, #12]
 80030b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80030b4:	d032      	beq.n	800311c <__ssputs_r+0x80>
 80030b6:	6825      	ldr	r5, [r4, #0]
 80030b8:	6909      	ldr	r1, [r1, #16]
 80030ba:	eba5 0901 	sub.w	r9, r5, r1
 80030be:	6965      	ldr	r5, [r4, #20]
 80030c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80030c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80030c8:	3301      	adds	r3, #1
 80030ca:	444b      	add	r3, r9
 80030cc:	106d      	asrs	r5, r5, #1
 80030ce:	429d      	cmp	r5, r3
 80030d0:	bf38      	it	cc
 80030d2:	461d      	movcc	r5, r3
 80030d4:	0553      	lsls	r3, r2, #21
 80030d6:	d531      	bpl.n	800313c <__ssputs_r+0xa0>
 80030d8:	4629      	mov	r1, r5
 80030da:	f000 fb63 	bl	80037a4 <_malloc_r>
 80030de:	4606      	mov	r6, r0
 80030e0:	b950      	cbnz	r0, 80030f8 <__ssputs_r+0x5c>
 80030e2:	230c      	movs	r3, #12
 80030e4:	f8ca 3000 	str.w	r3, [sl]
 80030e8:	89a3      	ldrh	r3, [r4, #12]
 80030ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030ee:	81a3      	strh	r3, [r4, #12]
 80030f0:	f04f 30ff 	mov.w	r0, #4294967295
 80030f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030f8:	6921      	ldr	r1, [r4, #16]
 80030fa:	464a      	mov	r2, r9
 80030fc:	f000 fabe 	bl	800367c <memcpy>
 8003100:	89a3      	ldrh	r3, [r4, #12]
 8003102:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003106:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800310a:	81a3      	strh	r3, [r4, #12]
 800310c:	6126      	str	r6, [r4, #16]
 800310e:	6165      	str	r5, [r4, #20]
 8003110:	444e      	add	r6, r9
 8003112:	eba5 0509 	sub.w	r5, r5, r9
 8003116:	6026      	str	r6, [r4, #0]
 8003118:	60a5      	str	r5, [r4, #8]
 800311a:	463e      	mov	r6, r7
 800311c:	42be      	cmp	r6, r7
 800311e:	d900      	bls.n	8003122 <__ssputs_r+0x86>
 8003120:	463e      	mov	r6, r7
 8003122:	6820      	ldr	r0, [r4, #0]
 8003124:	4632      	mov	r2, r6
 8003126:	4641      	mov	r1, r8
 8003128:	f000 fab6 	bl	8003698 <memmove>
 800312c:	68a3      	ldr	r3, [r4, #8]
 800312e:	1b9b      	subs	r3, r3, r6
 8003130:	60a3      	str	r3, [r4, #8]
 8003132:	6823      	ldr	r3, [r4, #0]
 8003134:	4433      	add	r3, r6
 8003136:	6023      	str	r3, [r4, #0]
 8003138:	2000      	movs	r0, #0
 800313a:	e7db      	b.n	80030f4 <__ssputs_r+0x58>
 800313c:	462a      	mov	r2, r5
 800313e:	f000 fba5 	bl	800388c <_realloc_r>
 8003142:	4606      	mov	r6, r0
 8003144:	2800      	cmp	r0, #0
 8003146:	d1e1      	bne.n	800310c <__ssputs_r+0x70>
 8003148:	6921      	ldr	r1, [r4, #16]
 800314a:	4650      	mov	r0, sl
 800314c:	f000 fabe 	bl	80036cc <_free_r>
 8003150:	e7c7      	b.n	80030e2 <__ssputs_r+0x46>
	...

08003154 <_svfiprintf_r>:
 8003154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003158:	4698      	mov	r8, r3
 800315a:	898b      	ldrh	r3, [r1, #12]
 800315c:	061b      	lsls	r3, r3, #24
 800315e:	b09d      	sub	sp, #116	; 0x74
 8003160:	4607      	mov	r7, r0
 8003162:	460d      	mov	r5, r1
 8003164:	4614      	mov	r4, r2
 8003166:	d50e      	bpl.n	8003186 <_svfiprintf_r+0x32>
 8003168:	690b      	ldr	r3, [r1, #16]
 800316a:	b963      	cbnz	r3, 8003186 <_svfiprintf_r+0x32>
 800316c:	2140      	movs	r1, #64	; 0x40
 800316e:	f000 fb19 	bl	80037a4 <_malloc_r>
 8003172:	6028      	str	r0, [r5, #0]
 8003174:	6128      	str	r0, [r5, #16]
 8003176:	b920      	cbnz	r0, 8003182 <_svfiprintf_r+0x2e>
 8003178:	230c      	movs	r3, #12
 800317a:	603b      	str	r3, [r7, #0]
 800317c:	f04f 30ff 	mov.w	r0, #4294967295
 8003180:	e0d1      	b.n	8003326 <_svfiprintf_r+0x1d2>
 8003182:	2340      	movs	r3, #64	; 0x40
 8003184:	616b      	str	r3, [r5, #20]
 8003186:	2300      	movs	r3, #0
 8003188:	9309      	str	r3, [sp, #36]	; 0x24
 800318a:	2320      	movs	r3, #32
 800318c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003190:	f8cd 800c 	str.w	r8, [sp, #12]
 8003194:	2330      	movs	r3, #48	; 0x30
 8003196:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003340 <_svfiprintf_r+0x1ec>
 800319a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800319e:	f04f 0901 	mov.w	r9, #1
 80031a2:	4623      	mov	r3, r4
 80031a4:	469a      	mov	sl, r3
 80031a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80031aa:	b10a      	cbz	r2, 80031b0 <_svfiprintf_r+0x5c>
 80031ac:	2a25      	cmp	r2, #37	; 0x25
 80031ae:	d1f9      	bne.n	80031a4 <_svfiprintf_r+0x50>
 80031b0:	ebba 0b04 	subs.w	fp, sl, r4
 80031b4:	d00b      	beq.n	80031ce <_svfiprintf_r+0x7a>
 80031b6:	465b      	mov	r3, fp
 80031b8:	4622      	mov	r2, r4
 80031ba:	4629      	mov	r1, r5
 80031bc:	4638      	mov	r0, r7
 80031be:	f7ff ff6d 	bl	800309c <__ssputs_r>
 80031c2:	3001      	adds	r0, #1
 80031c4:	f000 80aa 	beq.w	800331c <_svfiprintf_r+0x1c8>
 80031c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80031ca:	445a      	add	r2, fp
 80031cc:	9209      	str	r2, [sp, #36]	; 0x24
 80031ce:	f89a 3000 	ldrb.w	r3, [sl]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	f000 80a2 	beq.w	800331c <_svfiprintf_r+0x1c8>
 80031d8:	2300      	movs	r3, #0
 80031da:	f04f 32ff 	mov.w	r2, #4294967295
 80031de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80031e2:	f10a 0a01 	add.w	sl, sl, #1
 80031e6:	9304      	str	r3, [sp, #16]
 80031e8:	9307      	str	r3, [sp, #28]
 80031ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80031ee:	931a      	str	r3, [sp, #104]	; 0x68
 80031f0:	4654      	mov	r4, sl
 80031f2:	2205      	movs	r2, #5
 80031f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80031f8:	4851      	ldr	r0, [pc, #324]	; (8003340 <_svfiprintf_r+0x1ec>)
 80031fa:	f7fc ffe9 	bl	80001d0 <memchr>
 80031fe:	9a04      	ldr	r2, [sp, #16]
 8003200:	b9d8      	cbnz	r0, 800323a <_svfiprintf_r+0xe6>
 8003202:	06d0      	lsls	r0, r2, #27
 8003204:	bf44      	itt	mi
 8003206:	2320      	movmi	r3, #32
 8003208:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800320c:	0711      	lsls	r1, r2, #28
 800320e:	bf44      	itt	mi
 8003210:	232b      	movmi	r3, #43	; 0x2b
 8003212:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003216:	f89a 3000 	ldrb.w	r3, [sl]
 800321a:	2b2a      	cmp	r3, #42	; 0x2a
 800321c:	d015      	beq.n	800324a <_svfiprintf_r+0xf6>
 800321e:	9a07      	ldr	r2, [sp, #28]
 8003220:	4654      	mov	r4, sl
 8003222:	2000      	movs	r0, #0
 8003224:	f04f 0c0a 	mov.w	ip, #10
 8003228:	4621      	mov	r1, r4
 800322a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800322e:	3b30      	subs	r3, #48	; 0x30
 8003230:	2b09      	cmp	r3, #9
 8003232:	d94e      	bls.n	80032d2 <_svfiprintf_r+0x17e>
 8003234:	b1b0      	cbz	r0, 8003264 <_svfiprintf_r+0x110>
 8003236:	9207      	str	r2, [sp, #28]
 8003238:	e014      	b.n	8003264 <_svfiprintf_r+0x110>
 800323a:	eba0 0308 	sub.w	r3, r0, r8
 800323e:	fa09 f303 	lsl.w	r3, r9, r3
 8003242:	4313      	orrs	r3, r2
 8003244:	9304      	str	r3, [sp, #16]
 8003246:	46a2      	mov	sl, r4
 8003248:	e7d2      	b.n	80031f0 <_svfiprintf_r+0x9c>
 800324a:	9b03      	ldr	r3, [sp, #12]
 800324c:	1d19      	adds	r1, r3, #4
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	9103      	str	r1, [sp, #12]
 8003252:	2b00      	cmp	r3, #0
 8003254:	bfbb      	ittet	lt
 8003256:	425b      	neglt	r3, r3
 8003258:	f042 0202 	orrlt.w	r2, r2, #2
 800325c:	9307      	strge	r3, [sp, #28]
 800325e:	9307      	strlt	r3, [sp, #28]
 8003260:	bfb8      	it	lt
 8003262:	9204      	strlt	r2, [sp, #16]
 8003264:	7823      	ldrb	r3, [r4, #0]
 8003266:	2b2e      	cmp	r3, #46	; 0x2e
 8003268:	d10c      	bne.n	8003284 <_svfiprintf_r+0x130>
 800326a:	7863      	ldrb	r3, [r4, #1]
 800326c:	2b2a      	cmp	r3, #42	; 0x2a
 800326e:	d135      	bne.n	80032dc <_svfiprintf_r+0x188>
 8003270:	9b03      	ldr	r3, [sp, #12]
 8003272:	1d1a      	adds	r2, r3, #4
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	9203      	str	r2, [sp, #12]
 8003278:	2b00      	cmp	r3, #0
 800327a:	bfb8      	it	lt
 800327c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003280:	3402      	adds	r4, #2
 8003282:	9305      	str	r3, [sp, #20]
 8003284:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003350 <_svfiprintf_r+0x1fc>
 8003288:	7821      	ldrb	r1, [r4, #0]
 800328a:	2203      	movs	r2, #3
 800328c:	4650      	mov	r0, sl
 800328e:	f7fc ff9f 	bl	80001d0 <memchr>
 8003292:	b140      	cbz	r0, 80032a6 <_svfiprintf_r+0x152>
 8003294:	2340      	movs	r3, #64	; 0x40
 8003296:	eba0 000a 	sub.w	r0, r0, sl
 800329a:	fa03 f000 	lsl.w	r0, r3, r0
 800329e:	9b04      	ldr	r3, [sp, #16]
 80032a0:	4303      	orrs	r3, r0
 80032a2:	3401      	adds	r4, #1
 80032a4:	9304      	str	r3, [sp, #16]
 80032a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032aa:	4826      	ldr	r0, [pc, #152]	; (8003344 <_svfiprintf_r+0x1f0>)
 80032ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80032b0:	2206      	movs	r2, #6
 80032b2:	f7fc ff8d 	bl	80001d0 <memchr>
 80032b6:	2800      	cmp	r0, #0
 80032b8:	d038      	beq.n	800332c <_svfiprintf_r+0x1d8>
 80032ba:	4b23      	ldr	r3, [pc, #140]	; (8003348 <_svfiprintf_r+0x1f4>)
 80032bc:	bb1b      	cbnz	r3, 8003306 <_svfiprintf_r+0x1b2>
 80032be:	9b03      	ldr	r3, [sp, #12]
 80032c0:	3307      	adds	r3, #7
 80032c2:	f023 0307 	bic.w	r3, r3, #7
 80032c6:	3308      	adds	r3, #8
 80032c8:	9303      	str	r3, [sp, #12]
 80032ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80032cc:	4433      	add	r3, r6
 80032ce:	9309      	str	r3, [sp, #36]	; 0x24
 80032d0:	e767      	b.n	80031a2 <_svfiprintf_r+0x4e>
 80032d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80032d6:	460c      	mov	r4, r1
 80032d8:	2001      	movs	r0, #1
 80032da:	e7a5      	b.n	8003228 <_svfiprintf_r+0xd4>
 80032dc:	2300      	movs	r3, #0
 80032de:	3401      	adds	r4, #1
 80032e0:	9305      	str	r3, [sp, #20]
 80032e2:	4619      	mov	r1, r3
 80032e4:	f04f 0c0a 	mov.w	ip, #10
 80032e8:	4620      	mov	r0, r4
 80032ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80032ee:	3a30      	subs	r2, #48	; 0x30
 80032f0:	2a09      	cmp	r2, #9
 80032f2:	d903      	bls.n	80032fc <_svfiprintf_r+0x1a8>
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d0c5      	beq.n	8003284 <_svfiprintf_r+0x130>
 80032f8:	9105      	str	r1, [sp, #20]
 80032fa:	e7c3      	b.n	8003284 <_svfiprintf_r+0x130>
 80032fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8003300:	4604      	mov	r4, r0
 8003302:	2301      	movs	r3, #1
 8003304:	e7f0      	b.n	80032e8 <_svfiprintf_r+0x194>
 8003306:	ab03      	add	r3, sp, #12
 8003308:	9300      	str	r3, [sp, #0]
 800330a:	462a      	mov	r2, r5
 800330c:	4b0f      	ldr	r3, [pc, #60]	; (800334c <_svfiprintf_r+0x1f8>)
 800330e:	a904      	add	r1, sp, #16
 8003310:	4638      	mov	r0, r7
 8003312:	f3af 8000 	nop.w
 8003316:	1c42      	adds	r2, r0, #1
 8003318:	4606      	mov	r6, r0
 800331a:	d1d6      	bne.n	80032ca <_svfiprintf_r+0x176>
 800331c:	89ab      	ldrh	r3, [r5, #12]
 800331e:	065b      	lsls	r3, r3, #25
 8003320:	f53f af2c 	bmi.w	800317c <_svfiprintf_r+0x28>
 8003324:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003326:	b01d      	add	sp, #116	; 0x74
 8003328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800332c:	ab03      	add	r3, sp, #12
 800332e:	9300      	str	r3, [sp, #0]
 8003330:	462a      	mov	r2, r5
 8003332:	4b06      	ldr	r3, [pc, #24]	; (800334c <_svfiprintf_r+0x1f8>)
 8003334:	a904      	add	r1, sp, #16
 8003336:	4638      	mov	r0, r7
 8003338:	f000 f87a 	bl	8003430 <_printf_i>
 800333c:	e7eb      	b.n	8003316 <_svfiprintf_r+0x1c2>
 800333e:	bf00      	nop
 8003340:	080039b0 	.word	0x080039b0
 8003344:	080039ba 	.word	0x080039ba
 8003348:	00000000 	.word	0x00000000
 800334c:	0800309d 	.word	0x0800309d
 8003350:	080039b6 	.word	0x080039b6

08003354 <_printf_common>:
 8003354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003358:	4616      	mov	r6, r2
 800335a:	4699      	mov	r9, r3
 800335c:	688a      	ldr	r2, [r1, #8]
 800335e:	690b      	ldr	r3, [r1, #16]
 8003360:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003364:	4293      	cmp	r3, r2
 8003366:	bfb8      	it	lt
 8003368:	4613      	movlt	r3, r2
 800336a:	6033      	str	r3, [r6, #0]
 800336c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003370:	4607      	mov	r7, r0
 8003372:	460c      	mov	r4, r1
 8003374:	b10a      	cbz	r2, 800337a <_printf_common+0x26>
 8003376:	3301      	adds	r3, #1
 8003378:	6033      	str	r3, [r6, #0]
 800337a:	6823      	ldr	r3, [r4, #0]
 800337c:	0699      	lsls	r1, r3, #26
 800337e:	bf42      	ittt	mi
 8003380:	6833      	ldrmi	r3, [r6, #0]
 8003382:	3302      	addmi	r3, #2
 8003384:	6033      	strmi	r3, [r6, #0]
 8003386:	6825      	ldr	r5, [r4, #0]
 8003388:	f015 0506 	ands.w	r5, r5, #6
 800338c:	d106      	bne.n	800339c <_printf_common+0x48>
 800338e:	f104 0a19 	add.w	sl, r4, #25
 8003392:	68e3      	ldr	r3, [r4, #12]
 8003394:	6832      	ldr	r2, [r6, #0]
 8003396:	1a9b      	subs	r3, r3, r2
 8003398:	42ab      	cmp	r3, r5
 800339a:	dc26      	bgt.n	80033ea <_printf_common+0x96>
 800339c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80033a0:	1e13      	subs	r3, r2, #0
 80033a2:	6822      	ldr	r2, [r4, #0]
 80033a4:	bf18      	it	ne
 80033a6:	2301      	movne	r3, #1
 80033a8:	0692      	lsls	r2, r2, #26
 80033aa:	d42b      	bmi.n	8003404 <_printf_common+0xb0>
 80033ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80033b0:	4649      	mov	r1, r9
 80033b2:	4638      	mov	r0, r7
 80033b4:	47c0      	blx	r8
 80033b6:	3001      	adds	r0, #1
 80033b8:	d01e      	beq.n	80033f8 <_printf_common+0xa4>
 80033ba:	6823      	ldr	r3, [r4, #0]
 80033bc:	68e5      	ldr	r5, [r4, #12]
 80033be:	6832      	ldr	r2, [r6, #0]
 80033c0:	f003 0306 	and.w	r3, r3, #6
 80033c4:	2b04      	cmp	r3, #4
 80033c6:	bf08      	it	eq
 80033c8:	1aad      	subeq	r5, r5, r2
 80033ca:	68a3      	ldr	r3, [r4, #8]
 80033cc:	6922      	ldr	r2, [r4, #16]
 80033ce:	bf0c      	ite	eq
 80033d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80033d4:	2500      	movne	r5, #0
 80033d6:	4293      	cmp	r3, r2
 80033d8:	bfc4      	itt	gt
 80033da:	1a9b      	subgt	r3, r3, r2
 80033dc:	18ed      	addgt	r5, r5, r3
 80033de:	2600      	movs	r6, #0
 80033e0:	341a      	adds	r4, #26
 80033e2:	42b5      	cmp	r5, r6
 80033e4:	d11a      	bne.n	800341c <_printf_common+0xc8>
 80033e6:	2000      	movs	r0, #0
 80033e8:	e008      	b.n	80033fc <_printf_common+0xa8>
 80033ea:	2301      	movs	r3, #1
 80033ec:	4652      	mov	r2, sl
 80033ee:	4649      	mov	r1, r9
 80033f0:	4638      	mov	r0, r7
 80033f2:	47c0      	blx	r8
 80033f4:	3001      	adds	r0, #1
 80033f6:	d103      	bne.n	8003400 <_printf_common+0xac>
 80033f8:	f04f 30ff 	mov.w	r0, #4294967295
 80033fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003400:	3501      	adds	r5, #1
 8003402:	e7c6      	b.n	8003392 <_printf_common+0x3e>
 8003404:	18e1      	adds	r1, r4, r3
 8003406:	1c5a      	adds	r2, r3, #1
 8003408:	2030      	movs	r0, #48	; 0x30
 800340a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800340e:	4422      	add	r2, r4
 8003410:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003414:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003418:	3302      	adds	r3, #2
 800341a:	e7c7      	b.n	80033ac <_printf_common+0x58>
 800341c:	2301      	movs	r3, #1
 800341e:	4622      	mov	r2, r4
 8003420:	4649      	mov	r1, r9
 8003422:	4638      	mov	r0, r7
 8003424:	47c0      	blx	r8
 8003426:	3001      	adds	r0, #1
 8003428:	d0e6      	beq.n	80033f8 <_printf_common+0xa4>
 800342a:	3601      	adds	r6, #1
 800342c:	e7d9      	b.n	80033e2 <_printf_common+0x8e>
	...

08003430 <_printf_i>:
 8003430:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003434:	7e0f      	ldrb	r7, [r1, #24]
 8003436:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003438:	2f78      	cmp	r7, #120	; 0x78
 800343a:	4691      	mov	r9, r2
 800343c:	4680      	mov	r8, r0
 800343e:	460c      	mov	r4, r1
 8003440:	469a      	mov	sl, r3
 8003442:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003446:	d807      	bhi.n	8003458 <_printf_i+0x28>
 8003448:	2f62      	cmp	r7, #98	; 0x62
 800344a:	d80a      	bhi.n	8003462 <_printf_i+0x32>
 800344c:	2f00      	cmp	r7, #0
 800344e:	f000 80d8 	beq.w	8003602 <_printf_i+0x1d2>
 8003452:	2f58      	cmp	r7, #88	; 0x58
 8003454:	f000 80a3 	beq.w	800359e <_printf_i+0x16e>
 8003458:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800345c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003460:	e03a      	b.n	80034d8 <_printf_i+0xa8>
 8003462:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003466:	2b15      	cmp	r3, #21
 8003468:	d8f6      	bhi.n	8003458 <_printf_i+0x28>
 800346a:	a101      	add	r1, pc, #4	; (adr r1, 8003470 <_printf_i+0x40>)
 800346c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003470:	080034c9 	.word	0x080034c9
 8003474:	080034dd 	.word	0x080034dd
 8003478:	08003459 	.word	0x08003459
 800347c:	08003459 	.word	0x08003459
 8003480:	08003459 	.word	0x08003459
 8003484:	08003459 	.word	0x08003459
 8003488:	080034dd 	.word	0x080034dd
 800348c:	08003459 	.word	0x08003459
 8003490:	08003459 	.word	0x08003459
 8003494:	08003459 	.word	0x08003459
 8003498:	08003459 	.word	0x08003459
 800349c:	080035e9 	.word	0x080035e9
 80034a0:	0800350d 	.word	0x0800350d
 80034a4:	080035cb 	.word	0x080035cb
 80034a8:	08003459 	.word	0x08003459
 80034ac:	08003459 	.word	0x08003459
 80034b0:	0800360b 	.word	0x0800360b
 80034b4:	08003459 	.word	0x08003459
 80034b8:	0800350d 	.word	0x0800350d
 80034bc:	08003459 	.word	0x08003459
 80034c0:	08003459 	.word	0x08003459
 80034c4:	080035d3 	.word	0x080035d3
 80034c8:	682b      	ldr	r3, [r5, #0]
 80034ca:	1d1a      	adds	r2, r3, #4
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	602a      	str	r2, [r5, #0]
 80034d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80034d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80034d8:	2301      	movs	r3, #1
 80034da:	e0a3      	b.n	8003624 <_printf_i+0x1f4>
 80034dc:	6820      	ldr	r0, [r4, #0]
 80034de:	6829      	ldr	r1, [r5, #0]
 80034e0:	0606      	lsls	r6, r0, #24
 80034e2:	f101 0304 	add.w	r3, r1, #4
 80034e6:	d50a      	bpl.n	80034fe <_printf_i+0xce>
 80034e8:	680e      	ldr	r6, [r1, #0]
 80034ea:	602b      	str	r3, [r5, #0]
 80034ec:	2e00      	cmp	r6, #0
 80034ee:	da03      	bge.n	80034f8 <_printf_i+0xc8>
 80034f0:	232d      	movs	r3, #45	; 0x2d
 80034f2:	4276      	negs	r6, r6
 80034f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80034f8:	485e      	ldr	r0, [pc, #376]	; (8003674 <_printf_i+0x244>)
 80034fa:	230a      	movs	r3, #10
 80034fc:	e019      	b.n	8003532 <_printf_i+0x102>
 80034fe:	680e      	ldr	r6, [r1, #0]
 8003500:	602b      	str	r3, [r5, #0]
 8003502:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003506:	bf18      	it	ne
 8003508:	b236      	sxthne	r6, r6
 800350a:	e7ef      	b.n	80034ec <_printf_i+0xbc>
 800350c:	682b      	ldr	r3, [r5, #0]
 800350e:	6820      	ldr	r0, [r4, #0]
 8003510:	1d19      	adds	r1, r3, #4
 8003512:	6029      	str	r1, [r5, #0]
 8003514:	0601      	lsls	r1, r0, #24
 8003516:	d501      	bpl.n	800351c <_printf_i+0xec>
 8003518:	681e      	ldr	r6, [r3, #0]
 800351a:	e002      	b.n	8003522 <_printf_i+0xf2>
 800351c:	0646      	lsls	r6, r0, #25
 800351e:	d5fb      	bpl.n	8003518 <_printf_i+0xe8>
 8003520:	881e      	ldrh	r6, [r3, #0]
 8003522:	4854      	ldr	r0, [pc, #336]	; (8003674 <_printf_i+0x244>)
 8003524:	2f6f      	cmp	r7, #111	; 0x6f
 8003526:	bf0c      	ite	eq
 8003528:	2308      	moveq	r3, #8
 800352a:	230a      	movne	r3, #10
 800352c:	2100      	movs	r1, #0
 800352e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003532:	6865      	ldr	r5, [r4, #4]
 8003534:	60a5      	str	r5, [r4, #8]
 8003536:	2d00      	cmp	r5, #0
 8003538:	bfa2      	ittt	ge
 800353a:	6821      	ldrge	r1, [r4, #0]
 800353c:	f021 0104 	bicge.w	r1, r1, #4
 8003540:	6021      	strge	r1, [r4, #0]
 8003542:	b90e      	cbnz	r6, 8003548 <_printf_i+0x118>
 8003544:	2d00      	cmp	r5, #0
 8003546:	d04d      	beq.n	80035e4 <_printf_i+0x1b4>
 8003548:	4615      	mov	r5, r2
 800354a:	fbb6 f1f3 	udiv	r1, r6, r3
 800354e:	fb03 6711 	mls	r7, r3, r1, r6
 8003552:	5dc7      	ldrb	r7, [r0, r7]
 8003554:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003558:	4637      	mov	r7, r6
 800355a:	42bb      	cmp	r3, r7
 800355c:	460e      	mov	r6, r1
 800355e:	d9f4      	bls.n	800354a <_printf_i+0x11a>
 8003560:	2b08      	cmp	r3, #8
 8003562:	d10b      	bne.n	800357c <_printf_i+0x14c>
 8003564:	6823      	ldr	r3, [r4, #0]
 8003566:	07de      	lsls	r6, r3, #31
 8003568:	d508      	bpl.n	800357c <_printf_i+0x14c>
 800356a:	6923      	ldr	r3, [r4, #16]
 800356c:	6861      	ldr	r1, [r4, #4]
 800356e:	4299      	cmp	r1, r3
 8003570:	bfde      	ittt	le
 8003572:	2330      	movle	r3, #48	; 0x30
 8003574:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003578:	f105 35ff 	addle.w	r5, r5, #4294967295
 800357c:	1b52      	subs	r2, r2, r5
 800357e:	6122      	str	r2, [r4, #16]
 8003580:	f8cd a000 	str.w	sl, [sp]
 8003584:	464b      	mov	r3, r9
 8003586:	aa03      	add	r2, sp, #12
 8003588:	4621      	mov	r1, r4
 800358a:	4640      	mov	r0, r8
 800358c:	f7ff fee2 	bl	8003354 <_printf_common>
 8003590:	3001      	adds	r0, #1
 8003592:	d14c      	bne.n	800362e <_printf_i+0x1fe>
 8003594:	f04f 30ff 	mov.w	r0, #4294967295
 8003598:	b004      	add	sp, #16
 800359a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800359e:	4835      	ldr	r0, [pc, #212]	; (8003674 <_printf_i+0x244>)
 80035a0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80035a4:	6829      	ldr	r1, [r5, #0]
 80035a6:	6823      	ldr	r3, [r4, #0]
 80035a8:	f851 6b04 	ldr.w	r6, [r1], #4
 80035ac:	6029      	str	r1, [r5, #0]
 80035ae:	061d      	lsls	r5, r3, #24
 80035b0:	d514      	bpl.n	80035dc <_printf_i+0x1ac>
 80035b2:	07df      	lsls	r7, r3, #31
 80035b4:	bf44      	itt	mi
 80035b6:	f043 0320 	orrmi.w	r3, r3, #32
 80035ba:	6023      	strmi	r3, [r4, #0]
 80035bc:	b91e      	cbnz	r6, 80035c6 <_printf_i+0x196>
 80035be:	6823      	ldr	r3, [r4, #0]
 80035c0:	f023 0320 	bic.w	r3, r3, #32
 80035c4:	6023      	str	r3, [r4, #0]
 80035c6:	2310      	movs	r3, #16
 80035c8:	e7b0      	b.n	800352c <_printf_i+0xfc>
 80035ca:	6823      	ldr	r3, [r4, #0]
 80035cc:	f043 0320 	orr.w	r3, r3, #32
 80035d0:	6023      	str	r3, [r4, #0]
 80035d2:	2378      	movs	r3, #120	; 0x78
 80035d4:	4828      	ldr	r0, [pc, #160]	; (8003678 <_printf_i+0x248>)
 80035d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80035da:	e7e3      	b.n	80035a4 <_printf_i+0x174>
 80035dc:	0659      	lsls	r1, r3, #25
 80035de:	bf48      	it	mi
 80035e0:	b2b6      	uxthmi	r6, r6
 80035e2:	e7e6      	b.n	80035b2 <_printf_i+0x182>
 80035e4:	4615      	mov	r5, r2
 80035e6:	e7bb      	b.n	8003560 <_printf_i+0x130>
 80035e8:	682b      	ldr	r3, [r5, #0]
 80035ea:	6826      	ldr	r6, [r4, #0]
 80035ec:	6961      	ldr	r1, [r4, #20]
 80035ee:	1d18      	adds	r0, r3, #4
 80035f0:	6028      	str	r0, [r5, #0]
 80035f2:	0635      	lsls	r5, r6, #24
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	d501      	bpl.n	80035fc <_printf_i+0x1cc>
 80035f8:	6019      	str	r1, [r3, #0]
 80035fa:	e002      	b.n	8003602 <_printf_i+0x1d2>
 80035fc:	0670      	lsls	r0, r6, #25
 80035fe:	d5fb      	bpl.n	80035f8 <_printf_i+0x1c8>
 8003600:	8019      	strh	r1, [r3, #0]
 8003602:	2300      	movs	r3, #0
 8003604:	6123      	str	r3, [r4, #16]
 8003606:	4615      	mov	r5, r2
 8003608:	e7ba      	b.n	8003580 <_printf_i+0x150>
 800360a:	682b      	ldr	r3, [r5, #0]
 800360c:	1d1a      	adds	r2, r3, #4
 800360e:	602a      	str	r2, [r5, #0]
 8003610:	681d      	ldr	r5, [r3, #0]
 8003612:	6862      	ldr	r2, [r4, #4]
 8003614:	2100      	movs	r1, #0
 8003616:	4628      	mov	r0, r5
 8003618:	f7fc fdda 	bl	80001d0 <memchr>
 800361c:	b108      	cbz	r0, 8003622 <_printf_i+0x1f2>
 800361e:	1b40      	subs	r0, r0, r5
 8003620:	6060      	str	r0, [r4, #4]
 8003622:	6863      	ldr	r3, [r4, #4]
 8003624:	6123      	str	r3, [r4, #16]
 8003626:	2300      	movs	r3, #0
 8003628:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800362c:	e7a8      	b.n	8003580 <_printf_i+0x150>
 800362e:	6923      	ldr	r3, [r4, #16]
 8003630:	462a      	mov	r2, r5
 8003632:	4649      	mov	r1, r9
 8003634:	4640      	mov	r0, r8
 8003636:	47d0      	blx	sl
 8003638:	3001      	adds	r0, #1
 800363a:	d0ab      	beq.n	8003594 <_printf_i+0x164>
 800363c:	6823      	ldr	r3, [r4, #0]
 800363e:	079b      	lsls	r3, r3, #30
 8003640:	d413      	bmi.n	800366a <_printf_i+0x23a>
 8003642:	68e0      	ldr	r0, [r4, #12]
 8003644:	9b03      	ldr	r3, [sp, #12]
 8003646:	4298      	cmp	r0, r3
 8003648:	bfb8      	it	lt
 800364a:	4618      	movlt	r0, r3
 800364c:	e7a4      	b.n	8003598 <_printf_i+0x168>
 800364e:	2301      	movs	r3, #1
 8003650:	4632      	mov	r2, r6
 8003652:	4649      	mov	r1, r9
 8003654:	4640      	mov	r0, r8
 8003656:	47d0      	blx	sl
 8003658:	3001      	adds	r0, #1
 800365a:	d09b      	beq.n	8003594 <_printf_i+0x164>
 800365c:	3501      	adds	r5, #1
 800365e:	68e3      	ldr	r3, [r4, #12]
 8003660:	9903      	ldr	r1, [sp, #12]
 8003662:	1a5b      	subs	r3, r3, r1
 8003664:	42ab      	cmp	r3, r5
 8003666:	dcf2      	bgt.n	800364e <_printf_i+0x21e>
 8003668:	e7eb      	b.n	8003642 <_printf_i+0x212>
 800366a:	2500      	movs	r5, #0
 800366c:	f104 0619 	add.w	r6, r4, #25
 8003670:	e7f5      	b.n	800365e <_printf_i+0x22e>
 8003672:	bf00      	nop
 8003674:	080039c1 	.word	0x080039c1
 8003678:	080039d2 	.word	0x080039d2

0800367c <memcpy>:
 800367c:	440a      	add	r2, r1
 800367e:	4291      	cmp	r1, r2
 8003680:	f100 33ff 	add.w	r3, r0, #4294967295
 8003684:	d100      	bne.n	8003688 <memcpy+0xc>
 8003686:	4770      	bx	lr
 8003688:	b510      	push	{r4, lr}
 800368a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800368e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003692:	4291      	cmp	r1, r2
 8003694:	d1f9      	bne.n	800368a <memcpy+0xe>
 8003696:	bd10      	pop	{r4, pc}

08003698 <memmove>:
 8003698:	4288      	cmp	r0, r1
 800369a:	b510      	push	{r4, lr}
 800369c:	eb01 0402 	add.w	r4, r1, r2
 80036a0:	d902      	bls.n	80036a8 <memmove+0x10>
 80036a2:	4284      	cmp	r4, r0
 80036a4:	4623      	mov	r3, r4
 80036a6:	d807      	bhi.n	80036b8 <memmove+0x20>
 80036a8:	1e43      	subs	r3, r0, #1
 80036aa:	42a1      	cmp	r1, r4
 80036ac:	d008      	beq.n	80036c0 <memmove+0x28>
 80036ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80036b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80036b6:	e7f8      	b.n	80036aa <memmove+0x12>
 80036b8:	4402      	add	r2, r0
 80036ba:	4601      	mov	r1, r0
 80036bc:	428a      	cmp	r2, r1
 80036be:	d100      	bne.n	80036c2 <memmove+0x2a>
 80036c0:	bd10      	pop	{r4, pc}
 80036c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80036c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80036ca:	e7f7      	b.n	80036bc <memmove+0x24>

080036cc <_free_r>:
 80036cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80036ce:	2900      	cmp	r1, #0
 80036d0:	d044      	beq.n	800375c <_free_r+0x90>
 80036d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80036d6:	9001      	str	r0, [sp, #4]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	f1a1 0404 	sub.w	r4, r1, #4
 80036de:	bfb8      	it	lt
 80036e0:	18e4      	addlt	r4, r4, r3
 80036e2:	f000 f913 	bl	800390c <__malloc_lock>
 80036e6:	4a1e      	ldr	r2, [pc, #120]	; (8003760 <_free_r+0x94>)
 80036e8:	9801      	ldr	r0, [sp, #4]
 80036ea:	6813      	ldr	r3, [r2, #0]
 80036ec:	b933      	cbnz	r3, 80036fc <_free_r+0x30>
 80036ee:	6063      	str	r3, [r4, #4]
 80036f0:	6014      	str	r4, [r2, #0]
 80036f2:	b003      	add	sp, #12
 80036f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80036f8:	f000 b90e 	b.w	8003918 <__malloc_unlock>
 80036fc:	42a3      	cmp	r3, r4
 80036fe:	d908      	bls.n	8003712 <_free_r+0x46>
 8003700:	6825      	ldr	r5, [r4, #0]
 8003702:	1961      	adds	r1, r4, r5
 8003704:	428b      	cmp	r3, r1
 8003706:	bf01      	itttt	eq
 8003708:	6819      	ldreq	r1, [r3, #0]
 800370a:	685b      	ldreq	r3, [r3, #4]
 800370c:	1949      	addeq	r1, r1, r5
 800370e:	6021      	streq	r1, [r4, #0]
 8003710:	e7ed      	b.n	80036ee <_free_r+0x22>
 8003712:	461a      	mov	r2, r3
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	b10b      	cbz	r3, 800371c <_free_r+0x50>
 8003718:	42a3      	cmp	r3, r4
 800371a:	d9fa      	bls.n	8003712 <_free_r+0x46>
 800371c:	6811      	ldr	r1, [r2, #0]
 800371e:	1855      	adds	r5, r2, r1
 8003720:	42a5      	cmp	r5, r4
 8003722:	d10b      	bne.n	800373c <_free_r+0x70>
 8003724:	6824      	ldr	r4, [r4, #0]
 8003726:	4421      	add	r1, r4
 8003728:	1854      	adds	r4, r2, r1
 800372a:	42a3      	cmp	r3, r4
 800372c:	6011      	str	r1, [r2, #0]
 800372e:	d1e0      	bne.n	80036f2 <_free_r+0x26>
 8003730:	681c      	ldr	r4, [r3, #0]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	6053      	str	r3, [r2, #4]
 8003736:	4421      	add	r1, r4
 8003738:	6011      	str	r1, [r2, #0]
 800373a:	e7da      	b.n	80036f2 <_free_r+0x26>
 800373c:	d902      	bls.n	8003744 <_free_r+0x78>
 800373e:	230c      	movs	r3, #12
 8003740:	6003      	str	r3, [r0, #0]
 8003742:	e7d6      	b.n	80036f2 <_free_r+0x26>
 8003744:	6825      	ldr	r5, [r4, #0]
 8003746:	1961      	adds	r1, r4, r5
 8003748:	428b      	cmp	r3, r1
 800374a:	bf04      	itt	eq
 800374c:	6819      	ldreq	r1, [r3, #0]
 800374e:	685b      	ldreq	r3, [r3, #4]
 8003750:	6063      	str	r3, [r4, #4]
 8003752:	bf04      	itt	eq
 8003754:	1949      	addeq	r1, r1, r5
 8003756:	6021      	streq	r1, [r4, #0]
 8003758:	6054      	str	r4, [r2, #4]
 800375a:	e7ca      	b.n	80036f2 <_free_r+0x26>
 800375c:	b003      	add	sp, #12
 800375e:	bd30      	pop	{r4, r5, pc}
 8003760:	20000184 	.word	0x20000184

08003764 <sbrk_aligned>:
 8003764:	b570      	push	{r4, r5, r6, lr}
 8003766:	4e0e      	ldr	r6, [pc, #56]	; (80037a0 <sbrk_aligned+0x3c>)
 8003768:	460c      	mov	r4, r1
 800376a:	6831      	ldr	r1, [r6, #0]
 800376c:	4605      	mov	r5, r0
 800376e:	b911      	cbnz	r1, 8003776 <sbrk_aligned+0x12>
 8003770:	f000 f8bc 	bl	80038ec <_sbrk_r>
 8003774:	6030      	str	r0, [r6, #0]
 8003776:	4621      	mov	r1, r4
 8003778:	4628      	mov	r0, r5
 800377a:	f000 f8b7 	bl	80038ec <_sbrk_r>
 800377e:	1c43      	adds	r3, r0, #1
 8003780:	d00a      	beq.n	8003798 <sbrk_aligned+0x34>
 8003782:	1cc4      	adds	r4, r0, #3
 8003784:	f024 0403 	bic.w	r4, r4, #3
 8003788:	42a0      	cmp	r0, r4
 800378a:	d007      	beq.n	800379c <sbrk_aligned+0x38>
 800378c:	1a21      	subs	r1, r4, r0
 800378e:	4628      	mov	r0, r5
 8003790:	f000 f8ac 	bl	80038ec <_sbrk_r>
 8003794:	3001      	adds	r0, #1
 8003796:	d101      	bne.n	800379c <sbrk_aligned+0x38>
 8003798:	f04f 34ff 	mov.w	r4, #4294967295
 800379c:	4620      	mov	r0, r4
 800379e:	bd70      	pop	{r4, r5, r6, pc}
 80037a0:	20000188 	.word	0x20000188

080037a4 <_malloc_r>:
 80037a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037a8:	1ccd      	adds	r5, r1, #3
 80037aa:	f025 0503 	bic.w	r5, r5, #3
 80037ae:	3508      	adds	r5, #8
 80037b0:	2d0c      	cmp	r5, #12
 80037b2:	bf38      	it	cc
 80037b4:	250c      	movcc	r5, #12
 80037b6:	2d00      	cmp	r5, #0
 80037b8:	4607      	mov	r7, r0
 80037ba:	db01      	blt.n	80037c0 <_malloc_r+0x1c>
 80037bc:	42a9      	cmp	r1, r5
 80037be:	d905      	bls.n	80037cc <_malloc_r+0x28>
 80037c0:	230c      	movs	r3, #12
 80037c2:	603b      	str	r3, [r7, #0]
 80037c4:	2600      	movs	r6, #0
 80037c6:	4630      	mov	r0, r6
 80037c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80037cc:	4e2e      	ldr	r6, [pc, #184]	; (8003888 <_malloc_r+0xe4>)
 80037ce:	f000 f89d 	bl	800390c <__malloc_lock>
 80037d2:	6833      	ldr	r3, [r6, #0]
 80037d4:	461c      	mov	r4, r3
 80037d6:	bb34      	cbnz	r4, 8003826 <_malloc_r+0x82>
 80037d8:	4629      	mov	r1, r5
 80037da:	4638      	mov	r0, r7
 80037dc:	f7ff ffc2 	bl	8003764 <sbrk_aligned>
 80037e0:	1c43      	adds	r3, r0, #1
 80037e2:	4604      	mov	r4, r0
 80037e4:	d14d      	bne.n	8003882 <_malloc_r+0xde>
 80037e6:	6834      	ldr	r4, [r6, #0]
 80037e8:	4626      	mov	r6, r4
 80037ea:	2e00      	cmp	r6, #0
 80037ec:	d140      	bne.n	8003870 <_malloc_r+0xcc>
 80037ee:	6823      	ldr	r3, [r4, #0]
 80037f0:	4631      	mov	r1, r6
 80037f2:	4638      	mov	r0, r7
 80037f4:	eb04 0803 	add.w	r8, r4, r3
 80037f8:	f000 f878 	bl	80038ec <_sbrk_r>
 80037fc:	4580      	cmp	r8, r0
 80037fe:	d13a      	bne.n	8003876 <_malloc_r+0xd2>
 8003800:	6821      	ldr	r1, [r4, #0]
 8003802:	3503      	adds	r5, #3
 8003804:	1a6d      	subs	r5, r5, r1
 8003806:	f025 0503 	bic.w	r5, r5, #3
 800380a:	3508      	adds	r5, #8
 800380c:	2d0c      	cmp	r5, #12
 800380e:	bf38      	it	cc
 8003810:	250c      	movcc	r5, #12
 8003812:	4629      	mov	r1, r5
 8003814:	4638      	mov	r0, r7
 8003816:	f7ff ffa5 	bl	8003764 <sbrk_aligned>
 800381a:	3001      	adds	r0, #1
 800381c:	d02b      	beq.n	8003876 <_malloc_r+0xd2>
 800381e:	6823      	ldr	r3, [r4, #0]
 8003820:	442b      	add	r3, r5
 8003822:	6023      	str	r3, [r4, #0]
 8003824:	e00e      	b.n	8003844 <_malloc_r+0xa0>
 8003826:	6822      	ldr	r2, [r4, #0]
 8003828:	1b52      	subs	r2, r2, r5
 800382a:	d41e      	bmi.n	800386a <_malloc_r+0xc6>
 800382c:	2a0b      	cmp	r2, #11
 800382e:	d916      	bls.n	800385e <_malloc_r+0xba>
 8003830:	1961      	adds	r1, r4, r5
 8003832:	42a3      	cmp	r3, r4
 8003834:	6025      	str	r5, [r4, #0]
 8003836:	bf18      	it	ne
 8003838:	6059      	strne	r1, [r3, #4]
 800383a:	6863      	ldr	r3, [r4, #4]
 800383c:	bf08      	it	eq
 800383e:	6031      	streq	r1, [r6, #0]
 8003840:	5162      	str	r2, [r4, r5]
 8003842:	604b      	str	r3, [r1, #4]
 8003844:	4638      	mov	r0, r7
 8003846:	f104 060b 	add.w	r6, r4, #11
 800384a:	f000 f865 	bl	8003918 <__malloc_unlock>
 800384e:	f026 0607 	bic.w	r6, r6, #7
 8003852:	1d23      	adds	r3, r4, #4
 8003854:	1af2      	subs	r2, r6, r3
 8003856:	d0b6      	beq.n	80037c6 <_malloc_r+0x22>
 8003858:	1b9b      	subs	r3, r3, r6
 800385a:	50a3      	str	r3, [r4, r2]
 800385c:	e7b3      	b.n	80037c6 <_malloc_r+0x22>
 800385e:	6862      	ldr	r2, [r4, #4]
 8003860:	42a3      	cmp	r3, r4
 8003862:	bf0c      	ite	eq
 8003864:	6032      	streq	r2, [r6, #0]
 8003866:	605a      	strne	r2, [r3, #4]
 8003868:	e7ec      	b.n	8003844 <_malloc_r+0xa0>
 800386a:	4623      	mov	r3, r4
 800386c:	6864      	ldr	r4, [r4, #4]
 800386e:	e7b2      	b.n	80037d6 <_malloc_r+0x32>
 8003870:	4634      	mov	r4, r6
 8003872:	6876      	ldr	r6, [r6, #4]
 8003874:	e7b9      	b.n	80037ea <_malloc_r+0x46>
 8003876:	230c      	movs	r3, #12
 8003878:	603b      	str	r3, [r7, #0]
 800387a:	4638      	mov	r0, r7
 800387c:	f000 f84c 	bl	8003918 <__malloc_unlock>
 8003880:	e7a1      	b.n	80037c6 <_malloc_r+0x22>
 8003882:	6025      	str	r5, [r4, #0]
 8003884:	e7de      	b.n	8003844 <_malloc_r+0xa0>
 8003886:	bf00      	nop
 8003888:	20000184 	.word	0x20000184

0800388c <_realloc_r>:
 800388c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003890:	4680      	mov	r8, r0
 8003892:	4614      	mov	r4, r2
 8003894:	460e      	mov	r6, r1
 8003896:	b921      	cbnz	r1, 80038a2 <_realloc_r+0x16>
 8003898:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800389c:	4611      	mov	r1, r2
 800389e:	f7ff bf81 	b.w	80037a4 <_malloc_r>
 80038a2:	b92a      	cbnz	r2, 80038b0 <_realloc_r+0x24>
 80038a4:	f7ff ff12 	bl	80036cc <_free_r>
 80038a8:	4625      	mov	r5, r4
 80038aa:	4628      	mov	r0, r5
 80038ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80038b0:	f000 f838 	bl	8003924 <_malloc_usable_size_r>
 80038b4:	4284      	cmp	r4, r0
 80038b6:	4607      	mov	r7, r0
 80038b8:	d802      	bhi.n	80038c0 <_realloc_r+0x34>
 80038ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80038be:	d812      	bhi.n	80038e6 <_realloc_r+0x5a>
 80038c0:	4621      	mov	r1, r4
 80038c2:	4640      	mov	r0, r8
 80038c4:	f7ff ff6e 	bl	80037a4 <_malloc_r>
 80038c8:	4605      	mov	r5, r0
 80038ca:	2800      	cmp	r0, #0
 80038cc:	d0ed      	beq.n	80038aa <_realloc_r+0x1e>
 80038ce:	42bc      	cmp	r4, r7
 80038d0:	4622      	mov	r2, r4
 80038d2:	4631      	mov	r1, r6
 80038d4:	bf28      	it	cs
 80038d6:	463a      	movcs	r2, r7
 80038d8:	f7ff fed0 	bl	800367c <memcpy>
 80038dc:	4631      	mov	r1, r6
 80038de:	4640      	mov	r0, r8
 80038e0:	f7ff fef4 	bl	80036cc <_free_r>
 80038e4:	e7e1      	b.n	80038aa <_realloc_r+0x1e>
 80038e6:	4635      	mov	r5, r6
 80038e8:	e7df      	b.n	80038aa <_realloc_r+0x1e>
	...

080038ec <_sbrk_r>:
 80038ec:	b538      	push	{r3, r4, r5, lr}
 80038ee:	4d06      	ldr	r5, [pc, #24]	; (8003908 <_sbrk_r+0x1c>)
 80038f0:	2300      	movs	r3, #0
 80038f2:	4604      	mov	r4, r0
 80038f4:	4608      	mov	r0, r1
 80038f6:	602b      	str	r3, [r5, #0]
 80038f8:	f7fd fc30 	bl	800115c <_sbrk>
 80038fc:	1c43      	adds	r3, r0, #1
 80038fe:	d102      	bne.n	8003906 <_sbrk_r+0x1a>
 8003900:	682b      	ldr	r3, [r5, #0]
 8003902:	b103      	cbz	r3, 8003906 <_sbrk_r+0x1a>
 8003904:	6023      	str	r3, [r4, #0]
 8003906:	bd38      	pop	{r3, r4, r5, pc}
 8003908:	2000018c 	.word	0x2000018c

0800390c <__malloc_lock>:
 800390c:	4801      	ldr	r0, [pc, #4]	; (8003914 <__malloc_lock+0x8>)
 800390e:	f000 b811 	b.w	8003934 <__retarget_lock_acquire_recursive>
 8003912:	bf00      	nop
 8003914:	20000190 	.word	0x20000190

08003918 <__malloc_unlock>:
 8003918:	4801      	ldr	r0, [pc, #4]	; (8003920 <__malloc_unlock+0x8>)
 800391a:	f000 b80c 	b.w	8003936 <__retarget_lock_release_recursive>
 800391e:	bf00      	nop
 8003920:	20000190 	.word	0x20000190

08003924 <_malloc_usable_size_r>:
 8003924:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003928:	1f18      	subs	r0, r3, #4
 800392a:	2b00      	cmp	r3, #0
 800392c:	bfbc      	itt	lt
 800392e:	580b      	ldrlt	r3, [r1, r0]
 8003930:	18c0      	addlt	r0, r0, r3
 8003932:	4770      	bx	lr

08003934 <__retarget_lock_acquire_recursive>:
 8003934:	4770      	bx	lr

08003936 <__retarget_lock_release_recursive>:
 8003936:	4770      	bx	lr

08003938 <_init>:
 8003938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800393a:	bf00      	nop
 800393c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800393e:	bc08      	pop	{r3}
 8003940:	469e      	mov	lr, r3
 8003942:	4770      	bx	lr

08003944 <_fini>:
 8003944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003946:	bf00      	nop
 8003948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800394a:	bc08      	pop	{r3}
 800394c:	469e      	mov	lr, r3
 800394e:	4770      	bx	lr
